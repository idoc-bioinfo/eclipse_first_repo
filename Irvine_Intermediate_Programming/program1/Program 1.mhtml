From: <Saved by Blink>
Snapshot-Content-Location: https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/program.html
Subject: Program 1
Date: Wed, 11 Jan 2023 17:03:42 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--TsQpS4MWtx9PrYUY4C1dCNrkzGg63ymugQ1iRCtsqT----"


------MultipartBoundary--TsQpS4MWtx9PrYUY4C1dCNrkzGg63ymugQ1iRCtsqT----
Content-Type: text/html
Content-ID: <frame-EAEBC2C43D00177CEC6199F4DEBF7920@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/program.html

<!DOCTYPE html PUBLIC "-//IETF//DTD HTML//EN"><html><head><meta http-equiv=
=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link rel=3D"style=
sheet" type=3D"text/css" href=3D"cid:css-b8e7ac27-f0e6-46f7-9d2e-8cdb17fc19=
ca@mhtml.blink" />
  <title>Program 1</title>
<link rel=3D"preconnect" href=3D"https://fonts.googleapis.com/" crossorigin=
=3D"true"><link rel=3D"preconnect" href=3D"https://fonts.gstatic.com/"><lin=
k rel=3D"stylesheet" href=3D"https://fonts.googleapis.com/css2?family=3DMul=
ish:wght@200;300;400;500;600;700;800;900&amp;display=3Dswa"></head>

<body bgcolor=3D"white">

<center>
<h1>Program 1</h1>
<h1>
Iteration and Major Data Types:<br>
List, Tuple, Set, and Dict (and Open for files)=20
</h1>
<p>
</p><h2>ICS-33: Intermediate Programming
</h2>
<p>
</p></center>


<!-- Introduction -->

<a name=3D"Introduction">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width=3D"20%"><b>Introduction</b></td>
<td width=3D"80%">
This programming assignment is designed to ensure that you know how to use
  combinations of Python's most important data types to model and
  compactly write/debug code that solves a wide variety of different
  programming problems.
The kind of abstract thinking that goes into modeling solutions to these
  programming problems with these data types (and iteration over them) is
  critical to your development as computer scientists.
<p>
There are five parts to this assignment.
<!--- (and and extra credit part at the end). --->
In each you will be asked to write a module that contains a few functions
  and a script at the bottom, which ties these functions together to solve
  the problem.
</p><p>
You should download the=20
  <a href=3D"https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/pr=
ogram1.zip">program1</a> project folder and use it to create an
  Eclipse project.
The project folder contains files for all the modules in which to write you=
r
  functions and scripts; it also contains all the data files that you need =
to
  test/debug your modules; finally, it contains all the batch self-check fi=
les
  I will use when grading your programs.
In your modules, you may import additional standard/courselib modules and y=
ou
  may write additional helper functions.
</p><p>
I recommend that you work on this assignment in pairs, and I recommend that=
 you
  work with someone in your lab section (so that you have 4 hours each week=
 of
  scheduled time together).
These are just recommendations.
Try to find someone who lives near you, with similar programming skills,
  and work habits/schedule: e.g., talk about whether you prefer to work
  mornings, nights, or weekends; what kind of commitment you will make to s=
ubmit
  programs early.
</p><p>
<b>Only one student should submit all parts of the the assignment</b>, but =
both
  students' UCInetID and name should appear in a comment at the <b>top</b> =
of
  <b>each submitted .py file</b>.
A special grading program reads this information.
The format is a comment starting with <b>Submitter</b> and <b>Partner</b> (=
when
  working with a partner), followed by a <b>colon</b>, followed by the stud=
ent's <b>UCInetID</b> (in all lower-case), followed by the student's <b>nam=
e in
  parentheses</b> (last name, comma, first name -capitalized appropriately)=
.
If you omit this information, or do not follow this exact form, it will req=
uire
  extra work for us to grade your program, so we will deduct points.
</p><p>
For example if Romeo Montague (whose UCInetID is romeo1) submitted a progra=
m
  that he worked on with his partner Juliet Capulet (whose UCInetID is jcap=
ulet)
  the comment at the top of each .py file would appear as:
</p><pre><b># Submitter: romeo1(Montague, Romeo)
# Partner  : jcapulet(Capulet, Juliet)
# We certify that we worked cooperatively on this programming
#   assignment, according to the rules for pair programming</b></pre>
If you do not know what the terms <b>cooperatively</b> and/or
  <b>rules for pair programming</b> mean, please read about
  <a href=3D"https://www.ics.uci.edu/~pattis/common/handouts/pairprogrammin=
g.html">Pair Programming</a>=20
  <b>before</b> starting this assignment.
Please turn in each program <b>as you finish it</b>, so that I can more
  accurately assess the progress of the class as a whole during this assign=
ment.
<p>
Print this document and carefully read it, marking any parts that contain
  important detailed information that you find (for review before you turn =
in
  the files).
The code you write should be as elegant and compact as possible, using=20
  appropriate Python idioms.
You should familiarize yourselves with the <b>safe_open</b> function in the
  <b>goody</b> module and all the functions in the <b>prompt</b> module, bo=
th
  of which you should have installed in your <b>courselib</b> folder as par=
t
  of the Eclipse/Python installation.
Recall how to use the <b>sep</b> and <b>end</b> parameters in the <b>print<=
/b>
  function.
Currently Pythons <b>f-strings</b> offer the easiest way to format
  strings; know how to use them.
</p><p>
Reread the section on <b>Time Management</b> from Programming Assignment 0
  before starting this assignment.
</p><p>
<b>IMPORTANT 1</b>:
Before starting this assignment, download the
  <a href=3D"https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/xr=
ef.zip">xref</a> project folder which contains a small Python
  script <b>xref.py</b> that produces a cross-reference of all the words
  (converted to lower case) in a file (where words appear with spaces betwe=
en
  them: see <b>xrefin.txt</b> for an example): the words are listed in
  alphabetic order followed by a set (i.e., no duplicates) of the line numb=
ers
  it appears on (listed in increasing numeric order).
Before solving the problems in this programming assignment, ensure you
  understand all the details of how this program works: look at features an=
d
  functions like <b>safe_open</b>, <b>defaultdict</b> (and how it is used),
  <b>enumerate</b>, <b>rstrip</b> and <b>lower</b>, <b>split</b> and
  <b>join</b>, <b>sorted</b>, <b>lambda</b>, <b>for</b> loops with two
  (unpacked) indexes, the two comprehensions (in the call to <b>max</b> and
  <b>join</b>), and <b>f-strings</b>.
These are the building blocks for many parts of this assignment; explore
  and experiment with this code to understand how all the parts work togeth=
er
  to achieve the desired result.
Run this code on more complicated data files.
</p><p>
<b>IMPORTANT 2</b>:
This assignment has 5 parts: pairs should work on each part together, not s=
plit
  them up and do them separately.
Parts 1-3 are going to be worth 12 points each; parts 4-5 are to be worth 7
  points each.
This skewing of points towards the simpler parts means students finishing t=
he
  first 3 parts correctly will yield a 72% average; those finishing the fir=
st 4=20
  parts correctly will have an 86% average; but to get an A on this  assign=
ment
  requires solving all parts correctly.
I strongly recommend finishing the first part by the weekend, and then
  finishing another part every few days.
</p><p>
In the past, many students waited until the last few days and then tried to
  write all their solutions: that is a recipe for learning little and getti=
ng a
  poor grade (or worse, cheating and getting caught; remember that I'm goin=
g to
  be running MOSS on all the parts of this assignment, checking for very si=
milar
  solutions).
So, now I am grading only 2 parts submitted on <b>the day before the due da=
te
  or later</b> (and only 1 part submitted on <b>the due date</b>).
You can submit as many parts as you want earlier than <b>the day before the=
 due
  date</b>.
That is if you submit all 5 parts on <b>the day before the due date</b>, I =
will
  grade only 2 parts; if you submit all parts on <b>the due date</b> I will
  grade only 1 part.
If you submit all 5 parts <b>two days before the due date</b>, I will grade=
 all
  5 parts and you will get two extra credit points.
In the worst case, to have me grade all parts, you must submit 3 parts <b>t=
wo
  days before the due date</b>, 1 part <b>the day before the due date</b>, =
and
  1 part on <b>the due date</b>.
So, start early on this assignment and submit your work well before the due
  date.
</p><p>
<b>IMPORTANT 3</b>:
I will <b>mostly</b> grade all these programs automatically, using the batc=
h
  self-check files provided in the download.
Use the <b>driver</b> program (explored in Programming Assignment #0) to ru=
n
  the batch-self check files in this assignment; debug any errors that they
  produce.
But the TAs (with some automated tools) will also look at/run the code in s=
ome
  of your scripts: so the scripts need to follow exactly what is shown in t=
he
  <b>Sample Interactions</b> part for each problem, including the <b>wordin=
g of
  all prompts and messages</b>.
Therefore, I suggest testing your code first to match the scripts; when tho=
se
  results are correct, test it using the batch self-check files.
Finally, if a submitted Python module contains even one syntax error or bad
  import, it will <b>fail all</b> its batch self-checks; ensure that you
  <b>submit modules with no syntax or bad import errors</b> (Python sometim=
es
  adds strange imports at the top of your file; ensure that all your import=
s
  are used and are reasonable).
See Announcement #5 for details.
</p></td>
</tr></tbody>
</table>


<!-- Problem 1 Influencers=20

<a name=3D"problem1">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width =3D"20%"><b>Problem #1: Influencers</b></td>
<td width =3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that prompts the user for the name =
of a
    file representing a graph;
  reads the file (storing the graph in a dictionary);
  prints the graph/dictionary in a special form;
  computes an approximation to the minimmum <b>influencers</b>
    (a special <b>set</b> of node names in the graph);
  repeatedly prompts the user for a <b>set</b> of node names in the graph
    (rejecting sets that specify any node name not in the graph);
  computes and prints all the nodes that are "influenced" (see below) by th=
e
    node names in the set.
<p>
We can use a graph to describe friendships or professional relationships,=
=20
  as Facebook and LinkedIn do.
Each node in a friendshiop graph is the name of a person, and that person h=
as
  edges (arrows) leading from his/her node to the nodes of all his/her frie=
nds.
In this model, friendship is symmetric (goes both ways):
  if <b>a</b> is <b>b</b>'s friend (there is an arrow from <b>a</b> to
  <b>b</b>), then <b>b</b> is <b>a</b>'s friend (there is an arrow from
  <b>b</b> to <b>a</b>).
For simplicity, we will represent these two arrows by one double arrow: a
  single line with arrowheads at both ends.
Such a graph, with all double-arrow edges, is called <b>undirected</b>.
The undirected graph below shows all the friendships among the names
  <b>a-k</b>: note tha there <b>k</b> is edgeless, meaning he/she has no
   friends.
<p>
<image src=3D"images/influencegraph.jpg">
<p>
So, for example, in the above graph <b>c</b> has 4 friends:
   <b>a</b>, <b>b</b>, <b>d</b>, and <b>g</b>.
Likewise <b>g</b> has 3 friends: <b>c</b>, <b>h</b>, and <b>j</b>.
Of course, because <b>c</b> has <b>g</b> as a friend, <b>g</b> has <b>c</b>=
 as
  a friend: see the double arrow.
Note that <b>h</b> has just 1 friend: <b>g</b>.
Finally <b>k</b> has 0 (no) friends.
<p>
Assume that people in a friendship graph can influence their friends:
  specifically, assume in this example that if <b>half or more</b> of a per=
son's
  friends like a song, then that person will decide (be influenced) to like=
 the
  song too.
For example, <b>c</b> has 4 friends, so if 2 or more of <b>c</b>'s friends =
like
  a song, then <b>c</b> will be influenced to like it too; it doesn't matte=
r
  which of <b>c</b>'s friends like the song, so long as 2 or more of his/he=
r
  friends like it.
<p>
<blockquote>
How does this rule apply if a person has an <b>odd</b> number of friends?
For example, <b>g</b> has 3 friends, so half for <b>g</b>'s friend would be
  3/2 =3D 1.5 friends; in this case, we round upward to an integer and requ=
ire 2
  or more of <b>g</b>'s 3 friends to like the song in order to influence
  <b>g</b> to like it.
<p>
In fact Python's <b>math.ceil</b> (ceiling) function computes and returns t=
he
  smallest integer &gt;=3D to its argument: so, calling <b>math.ceil(1.5)</=
b>
  returns <b>2</b>, and calling <b>math.ceil(2)</b> also returns <b>2</b>.
Therefore, <b>math.ceil(#friends/2)</b>, whether <b>#friends</b> is even or=
 odd,
  correctly computes the minimum number of friends (an <b>int</b>) needed t=
o
  influence that person.
Remember <b>ceil</b>: you will use it in your code; it is already imported =
into
  the module you will download, into which you will write your code.
</blockquote>
<p>
Let's see how a few people's influence can spread through this friendship g=
raph.
To start, let's suppose that that person <b>b</b> and <b>e</b> like a song.
Here is how they can influence their friends, illustrated and explained bel=
ow.
<p>
<image src=3D"images/influence1.jpg">
<image src=3D"images/influence2.jpg">
<image src=3D"images/influence3.jpg">
<image src=3D"images/influence4.jpg">
<image src=3D"images/influence5.jpg">
<p>
Computing which friends are influenced by <b>b</b> and <b>e</b>:
<ol>
<li>At the start, only <b>b</b> and <b>e</b> like a song; if a person likes=
 a
    song, we will write a <b>*</b> after their name in the graphs above, so
    the node names <b>b*</b> and <b>e*</b> appear in the first graph.
<li><b>a</b> now likes the song, because 1 of <b>a</b>'s 2 friends (&gt;=3D=
 half)
     like the song: <b>b</b>.
<li><b>c</b> now likes the song, because 2 of <b>c</b>'s 4 friends (&gt;=3D=
 half)
     like the  song: <b>a</b> and <b>b</b>.
<li><b>d</b> now likes the song, because 2 of <b>d</b>'s 3 friends (&gt;=3D=
 half)
     like the song: <b>c</b> and <b>e</b>.
<li><b>f</b> now likes the song, because 1 of <b>f</b>'s 1 friends (&gt;=3D=
 half)
     like the song: <b>d</b>.
</ol>
As this point, no other people are influenced by enough of their friends to=
 like
  the song; specifically, <b>g</b> needs 2 of his/her 3 friends to to inlue=
nce
  him/her to like the song, but only 1  of his/her friend likes it.
So <b>b</b> and <b>e</b> were not influential enough to make everyone in th=
e
  graph like a song, but they did influence <b>a</b>, <b>c</b>, <b>d</b>,
  and <b>f</b>.
<p>
In fact, no pair of people wields enough influence for everyone in this gra=
ph
  to like a song (note that no one can influence <b>k</b> to like it).
But if <b>d</b>, <b>g</b>, and <b>k</b> like a song, they can influence
  everyone else to like it too (check that this statement is true, to ensur=
e
  that you understand the influencing process).
This is the minimum number of people needed to influence everyone in this
  friendship graph.
In this problem, we will learn how to represent friendship graphs in Python=
 and
  implement an algorithm that computes a small set of nodes that can influe=
nce
  all the others.
If we wanted to create a viral marketing campaign to promote say a new song=
 (or
  any belief), we would concentrate our efforts on this set, because they c=
ould
  convince everyone else in their social network.

<h3>Input and Output:</h3>

We will store this graph in a dictionary: each person's/node's name will be=
 a
  key (<b>str</b>) whose  associated <b>value</b> is a <b>set</b> of <b>str=
</b>
  of the people/node names of his/her friends.
<p>
Read a file where each line is either one node name (a person with no
  identifiable friends) or a pair of node names (representing an undirected
  friendship edge) in the graph.
Note that node names may be any number of characters (not just the single
  characters used in this example), separated by one semicolon character.
Build a dictionary whose keys are <b>str</b> node names, and whose associat=
ed
  values are <b>set</b>s of <b>str</b> node names that are friends.
We annotate this dictionary as <b>{str:{str}}</b>.
<p>
For example, the input file <b>graph1.txt</b> contains the following
  lines (which could appear in this order, or any other order, and still
  produce the same dictionary).
By convention, we will put all friendless names at the end of the file.
<b><pre>  a;b
  a;c
  b;c
  c;d
  d;e
  d;f
  c;g
  g;h
  g;j
  i;j
  k</pre></b>
which represent the original friendship graph we examined above.
<p>
<image src=3D"images/influencegraph.jpg">
<p>
Print the graph, one node name per line followed by the set of all his/her
  friend's node names (alphabetically).
This graph above would print as
<b><pre>  Graph: person -> [friends]
    a -> ['b', 'c']
    b -> ['a', 'c']
    c -> ['a', 'b', 'd', 'g']
    d -> ['c', 'e', 'f']
    e -> ['d']
    f -> ['d']
    g -> ['c', 'h', 'j']
    h -> ['g']
    i -> ['j']
    j -> ['g', 'i']
    k -> []</pre></b>
<p>
Note that the node names must be <b>sorted</b> alphabetically; and, the
  <b>set</b> of associated node names must appear in a <b>list</b> whose va=
lues
  are <b>sorted</b> alphabetically: we use a <b>list</b>, because it makes =
no
  sense to talk about sorted <b>sets</b>.
Note that because node <b>k</b> appears in the input file on a line by itse=
lf,
  it has no friends.
<b>Remember that friendship is symmetric!</b> So the line <b>a;b</b> means
  <b>b</b> is <b>a</b>'s friend and <b>a</b> is <b>b</b>'s friend; this
  means the node name <b>b</b> appears in node <b>a</b>'s associated set an=
d the
  node name <b>a</b> appears in node <b>b</b>'s associated set.
<p>
There are multiple data files for this program: <b>graph1.txt</b> (shown
  above), <b>graph2.txt</b> and <b>graph3.txt</b>; test/debug your program =
on
  the first file; when you are done, test it on the remaining files.
Draw the graph represented by each file to ensure that your code correctly
  prints it and computes the set of influencer nodes (which you can do by
  eyeballing the graphs: they are small).
<p>
Here is a description of the Influencer algorithm for computing a small set=
 of=20
 nodes that can influence every node in the graph.
It is guaranteed to produce a small set of nodes with the desired property,=
 but
  it will not necessarily compute the <b>smallest</b> such set in all cases
  (that is a much harder problem).
You must implement this Influencer algorithm, as it is described below.
<p>
It is fairly straightforward to specify the Influencer algorithm, which is
  straightforward to implement in Python.
But, first you must understand these English instructions, and only then ca=
n
  you carefully translate them into Python code.
You should hand-simulate this algorithm using the data above, and verify th=
at
  it produces the results that you expect, before coding it in Python.
<ol>
<li>Make a dictionary (I'll call it <b>infl_dict</b> here) whose keys are a=
ll
       the node names in the graph and whose associated values are 3-lists.
    Initially, each 3-list stores
      <ul>
      <li>at index 0: the number of friends of the node minus the number of
            friends needed to influence the node (this second value is the
            <b>ceil</b> of half the number of its friends);
          but, if a node contains no friends, the value stored at index 0
            should be <b>-1</b>.
      <li>at index 1: the number of friends of the node
      <li>at index 2: the node name itself (duplicating the key)
      </ul>
    Index 0 for a node specifies its number of friends that can be removed
      while still allowing the node to be influenced by its remaining frien=
ds.
    For example Index 0 for <b>g</b> is computed as
      <b>3-ceil(3/2)</b> =3D <b>1</b> meaning that node <b>c</b> can have 1=
 of
      its friends removed and still be influenced by its (2) remaining frie=
nds.
    <p>
    If Index 0 stores a negative value, it cannot be influenced by its frie=
nds,
      so it must be part of the returned set of influencers: see  the last =
pair
      of lines below.
<p>
<li>Repeat the following process until termination:
<ol type=3D"a" start=3D"a">
  <li>Create a list of the 3-tuple values currently stored as 3-list values=
 in
        <b>infl_dict</b>, but only if their index 0 values are non-negative=
;
        these are candidates for removal from the <b>infl_dict</b>, since t=
hey
        can still be influenced by their friends.
  <li>Terminate the Influencer algorithm if there are no values in this lis=
t;
        otherwise ...
  <li>Find the smallest 3-tuple in this list: use the <b>min</b> function
        (not via sorting).
      Because 3-tuples are unique, the minimum 3-tuple is unique.
  <li>Remove the specified node name (see index 2) from <b>infl_dict</b>.
  <li>For every friend of this node in the graph that is also still in
         <b>infl_dict</b>, decreeasing its index 0 and index 1 values
         by 1 in its associated 3-list.
</ol>
</ol>
<p>

Upon terminating, the keys remaining in <b>infl_dict</b> represent a small
  (but not necessarily the smallest) set of influencers for the entire
  friendship graph.
Note that although <b>infl_dict</b> changes, the original dictionary storin=
g
  the friendship graph remains unchanged.
<p> =20
Read these instructions carefully, a few times.
Hand simulate these instructions to ensure that you understand the Influenc=
er
  algorithm; use the data above, which is automatically traced in the examp=
le
  below.
Do not attempt to write any Python code to solve this problem until you
  understand this algorithm and can apply it to the data specified above.
Eventually you will write your Python code to produce such a trace
   conditionally.
<p>
Here is a trace (see the 2nd parameter to the <b>find_influencers</b> funct=
ion
  described below, which activiates the trace) for the friendship graph
  specified above.
The order of values in the dictionaries and lists are arbitrary; I have wri=
tten
  these data structures on multiple lines for formating purposes..
<b><pre> =20
  influencer dictionary =3D {'a': [1, 2, 'a'], 'b': [1, 2, 'b'], 'c': [2, 4=
, 'c'], 'd': [1, 3, 'd'],
                           'e': [0, 1, 'e'], 'f': [0, 1, 'f'], 'g': [1, 3, =
'g'], 'h': [0, 1, 'h'],
                           'j': [1, 2, 'j'], 'i': [0, 1, 'i'], 'k': [-1, 0,=
 'k']}
  removal candidates    =3D [(1, 2, 'a'), (1, 2, 'b'), (2, 4, 'c'), (1, 3, =
'd'), (0, 1, 'e'),
                           (0, 1, 'f'), (1, 3, 'g'), (0, 1, 'h'), (1, 2, 'j=
'), (0, 1, 'i')]
  (0, 1, 'e') is the smallest candidate
  Removing e as key from influencer dictionary, also decrementing each frie=
nd's values there=20

  influencer dictionary =3D {'a': [1, 2, 'a'], 'b': [1, 2, 'b'], 'c': [2, 4=
, 'c'], 'd': [0, 2, 'd'],
                           'f': [0, 1, 'f'], 'g': [1, 3, 'g'], 'h': [0, 1, =
'h'], 'j': [1, 2, 'j'],
                         'i': [0, 1, 'i'], 'k': [-1, 0, 'k']}
  removal candidates    =3D [(1, 2, 'a'), (1, 2, 'b'), (2, 4, 'c'), (0, 2, =
'd'), (0, 1, 'f'),
                           (1, 3, 'g'), (0, 1, 'h'), (1, 2, 'j'), (0, 1, 'i=
')]
  (0, 1, 'f') is the smallest candidate
  Removing f as key from influencer dictionary, also decrementing each frie=
nd's values there=20

  influencer dictionary =3D {'a': [1, 2, 'a'], 'b': [1, 2, 'b'], 'c': [2, 4=
, 'c'], 'd': [-1, 1, 'd'],
                           'g': [1, 3, 'g'], 'h': [0, 1, 'h'], 'j': [1, 2, =
'j'], 'i': [0, 1, 'i'],
                           'k': [-1, 0, 'k']}
  removal candidates    =3D [(1, 2, 'a'), (1, 2, 'b'), (2, 4, 'c'), (1, 3, =
'g'), (0, 1, 'h'),
                           (1, 2, 'j'), (0, 1, 'i')]
  (0, 1, 'h') is the smallest candidate
  Removing h as key from influencer dictionary, also decrementing each frie=
nd's values there=20

 influencer dictionary =3D {'a': [1, 2, 'a'], 'b': [1, 2, 'b'], 'c': [2, 4,=
 'c'], 'd': [-1, 1, 'd'],
                          'g': [0, 2, 'g'], 'j': [1, 2, 'j'], 'i': [0, 1, '=
i'], 'k': [-1, 0, 'k']}
 removal candidates    =3D [(1, 2, 'a'), (1, 2, 'b'), (2, 4, 'c'), (0, 2, '=
g'), (1, 2, 'j'),
                           (0, 1, 'i')]
  (0, 1, 'i') is the smallest candidate
  Removing i as key from influencer dictionary, also decrementing each frie=
nd's values there=20

  influencer dictionary =3D {'a': [1, 2, 'a'], 'b': [1, 2, 'b'], 'c': [2, 4=
, 'c'], 'd': [-1, 1, 'd'],
                           'g': [0, 2, 'g'], 'j': [0, 1, 'j'], 'k': [-1, 0,=
 'k']}
  removal candidates    =3D [(1, 2, 'a'), (1, 2, 'b'), (2, 4, 'c'), (0, 2, =
'g'), (0, 1, 'j')]
  (0, 1, 'j') is the smallest candidate
  Removing j as key from influencer dictionary, also decrementing each frie=
nd's values there=20

  influencer dictionary =3D {'a': [1, 2, 'a'], 'b': [1, 2, 'b'], 'c': [2, 4=
, 'c'], 'd': [-1, 1, 'd'],
                           'g': [-1, 1, 'g'], 'k': [-1, 0, 'k']}
  removal candidates    =3D [(1, 2, 'a'), (1, 2, 'b'), (2, 4, 'c')]
  (1, 2, 'a') is the smallest candidate
  Removing a as key from influencer dictionary, also decrementing each frie=
nd's values there=20

  influencer dictionary =3D {'b': [0, 1, 'b'], 'c': [1, 3, 'c'], 'd': [-1, =
1, 'd'], 'g': [-1, 1, 'g'],
                           'k': [-1, 0, 'k']}
  removal candidates    =3D [(0, 1, 'b'), (1, 3, 'c')]
  (0, 1, 'b') is the smallest candidate
  Removing b as key from influencer dictionary, also decrementing each frie=
nd's values there=20

  influencer dictionary =3D {'c': [0, 2, 'c'], 'd': [-1, 1, 'd'], 'g': [-1,=
 1, 'g'], 'k': [-1, 0, 'k']}
  removal candidates    =3D [(0, 2, 'c')]
  (0, 2, 'c') is the smallest candidate
  Removing c as key from influencer dictionary, also decrementing each frie=
nd's values there

  influencer dictionary =3D {'d': [-2, 0, 'd'], 'g': [-2, 0, 'g'], 'k': [-1=
, 0, 'k']}
  removal candidates    =3D []</pre></b>
<p>
When the algorithm terminates, the small influencer set is
  <b>{'d', 'g', 'k'}</b>: the node names remaining in the <b>infl_dict</b> =
whose
  associated 3-list stores a negative number at index 0.
<p>
Now, repeatedly prompt the user for a set of node names in the graph (until=
 the
  user enters <b>done</b>) and compute and print all the nodes these influe=
nce
  (as well as the percentage of nodes in the graph influenced): the default
  value for the prompt should be all the nodes computed above, which when
  entered should influence 100% of the nodes in the friendship graph (if th=
ey
  were computed correctly).
Reject any set that contains a node name that is not a key in the graph.
<p>
Call the function <b>all_influenced</b> to compute this value:
  it uses the friendship graph and the set of node names the user enters to
  compute all the influenced nodes in the friendship graph as follows.
<ol>
<li>Create a dictionary associating every node in the graph with a <b>bool<=
/b>
      value telling whether it is currently influenced: initiallyl <b>True<=
/b>
      if and  only if it is in the set supplied to the influencers paramete=
r;
      also compute the number of keys in this dictionary whose associated v=
alue
      is <b>True</b> (which initially is the length of the set).
<p>
<li>Repeat the following process until termination:
<ol type=3D"a" start=3D"a">
<li>For every item in the dictionary produced in Step 1, if it is not
      yet influenced (its associated <b>bool</b> is <b>False</b>) check to =
see
      whether it has enough friends (who are already influenced) to influen=
ce
      it as well; if so, change its associated dictionary value to <b>True<=
/b>.
    <p>
    You will need to treat friendless nodes specially: they are never influ=
enced
      because they have no friends.
<p>
<li>If the number of currently influenced nodes has not changed (from the
      previous time this value was computed), terminate by returning a set =
of
      all the dictionary keys whose associated value is <b>True</b>: all th=
e
      influenced nodes.
</ol>
</ol>

An example interaction (processing the graph above) might be
<b><pre>  Pick any subset (or enter done)[{'d', 'g', 'k'}]: <i>{'b','d'}</i=
>
  Friends influenced by subset (54.54545454545455% of graph) =3D {'c', 'b',=
 'a', 'f', 'e', 'd'}

  Pick any subset (or enter done)[{'d', 'g', 'k'}]: <i>{'a','x'}</i>
    Entry Error: '{'a','x'}'; =20
    Please enter a legal String

  Pick any subset (or enter done)[{'d', 'g', 'k'}]:=20
  Friends influenced by subset (100.0% of graph) =3D {'h', 'c', 'b', 'a', '=
i', 'f', 'j', 'e', 'd', 'g', 'k'}

  Pick any subset (or enter done)[{'d', 'g', 'k'}]: <i>done</i></pre></b>

<h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>read_graph</b> has an open (file) parameter; it returns the dictiona=
ry
     representing the undirected friendship graph
     (body is 11 lines).
<p>
<li><b>graph_as_str</b> has a dictionary parameter (representing the friend=
ship
      graph); it returns a multi-line string (each line is ended by
      <b>'\n'</b>), which when printed shows the contents of the graph in t=
he
      appropriate textual form
     (body is 4 lines; can you do it in 1?).
<p>
<li><b>find_influencers</b> has a dictionary parameter (representing the gr=
aph),
         as well as a tracing parameter whose default value is <b>False</b>=
.
       This function uses the Influencer algorithm described above to
         compute/return a small set of nodes that can influence everyone in=
 the
         friendship graph; if tracing is <b>True</b> it creates a trace in =
the
         form of the example trace shown above
    (body is 13 lines, but only 11 lines without tracing code).
<p>
<li><b>all_influenced</b> has a dictionary parameter (representing the grap=
h)
         and a set of initially infuenced nodes.
       This function uses the algorithm described above to compute/return t=
he
         set of nodes that can be influenced by this set
    (body is 10 lines).
<p>
<li>Write a script at the bottom of this module
    (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user to ent=
er the
    file storing friendship graph; reads this file and creates the required
    dictionary; labels and prints the dictionary (using <b>graph_as_str</b>=
);
    prompts the user about whether to trace this algorithm, then computes
    (using <b>find_influencers</b>) and prints the set of influencer nodes;
    repeatedly prompts the user to enter a set of nodes (rejecting any set =
that
    contains a node not in the graph) or the word <b>done</b>; calls
    <b>all_influenced</b> using the entered set, and prints the required
    information (body is 11 lines).
</ul>

<h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should "match" this one (sets will match if they have the same
  contents, independent of their order).
You should also check that it works for other graphs.

<b><pre>  Pick the file name containing the friendship graph: <i>graph.txt<=
/i>:=20
  Graph: person -> [friends]
    a -> ['b', 'c']
    b -> ['a', 'c']
    c -> ['a', 'b', 'd', 'g']
    d -> ['c', 'e', 'f']
    e -> ['d']
    f -> ['d']
    g -> ['c', 'h', 'j']
    h -> ['g']
    i -> ['j']
    j -> ['g', 'i']
    k -> []

  Produce Trace of Algorithm[True]: <i>False</i>
  The influencers are {'g', 'k', 'd'}

  Pick any subset (or enter done)[{'g', 'k', 'd'}]:=20
  Friends influenced by subset (100.0% of graph) =3D {'i', 'g', 'f', 'k', '=
c', 'j', 'h', 'a', 'b', 'd', 'e'}

  Pick any subset (or enter done)[{'g', 'k', 'd'}]: <i>done</i><pre></b>
</td>
</tbody>
</table>
-->

<!-- Problem 1, Reachability --->

</a><a name=3D"problem1">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width=3D"20%"><b>Problem #1: Reachability</b></td>
<td width=3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that prompts the user for the name =
of a
    file representing a graph;
  reads the file (storing the graph in a dictionary);
  prints the graph/dictionary in a special form;
  repeatedly prompts the user for a starting node name (rejecting those tha=
t
    are not keys in the graph);
  computes and prints all the node names that are reachable from it by
    following zero or more edges in the graph (e.g., a node is reachable fr=
om
    itself).

<h3>Input and Output:</h3>
Read a file of pairs of node names (representing edges) in a directed
  graph, building a dictionary whose key is a <b>str</b> source node name a=
nd
  whose associated value is a <b>set</b> of <b>str</b> destination node nam=
es
  that are each reachable directly from the source node name key.
We annotate this dictionary as <b>{str:{str}}</b>.
<p>
In the file, two nodes names appear on each line: first the source node nam=
e,
  then the destination node name, with these node names (which may be entir=
e
  words, not just single characters) separated by one semicolon character.
For example, the input file <b>graph1.txt</b> contains the following
  lines (which could appear in this order, or any other order, and still
  produce the same dictionary).
<b></b></p><pre><b>  c;f
  b;d
  a;c
  c;e
  d;g
  a;b
  e;d
  f;g
  f;d</b></pre>
which represent the graph
<p>
<img src=3D"https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/ima=
ges/graph.gif">
</p><p>
Print the graph, one source node name per line followed by the set of all t=
he
  destination node names that the source can immediately reach.
The graph above would print as
<b></b></p><pre><b>  Graph: str (one source node) -&gt; [str] (sorted list =
of destination nodes)
    a -&gt; ['b', 'c']
    b -&gt; ['d']
    c -&gt; ['e', 'f']
    d -&gt; ['g']
    e -&gt; ['d']
    f -&gt; ['d', 'g']</b></pre>
<p>
Note that the source node names must be <b>sorted</b> alphabetically; the
  <b>set</b> of desintation node names associated with each source must app=
ear
  in a <b>list</b> whose values are also <b>sorted</b> alphabetically: it m=
akes
  no sense to talk about sorted <b>sets</b>.
Note that because node <b>g</b> is not a source node (it is only a
  destination node), it does not appear first on any line (and appears only
  in the <b>sets</b> for source nodes <b>d</b> and <b>f</b>).
</p><p>
There are multiple data files for this program: <b>graph1.txt</b> (shown
  above), <b>graph2.txt</b> and <b>graph3.txt</b>; test/debug your program =
on
  the first file; when you are done, test it on the remaining files.
Draw the graph represented by each file to ensure that your code correctly
  prints it and computes the node names reachable from any source node (whi=
ch
  you can do by eyeballing the graphs: they are small).
</p><p>
Repeatedly prompt the user for a starting node name in the graph (until the=
 user
  enters <b>terminate</b>) and compute and print all the node names that ar=
e
  reachable from it by following edges in the graph.
Reject any node name that is not a key in the graph.
An example interaction (processing the graph above) might be
<b></b></p><pre><b>  Specify one start node (or terminate): <i>e</i>
  From the start node e, reachable nodes =3D {'g', 'e', 'd'}

  Specify one start node (or terminate): <i>x</i>
    Entry Error: 'x';  Illegal: not a source node
    Please enter a legal String

  Specify one start node (or terminate): <i>a</i>
  From the start node a, reachable nodes =3D {'g', 'f', 'e', 'd', 'c', 'b',=
 'a'}

  Specify one start node (or terminate): <i>terminate</i></b></pre>
<h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>read_graph</b> has an open (file) parameter; it returns the dictiona=
ry
     representing the graph
     (body is 5 lines).
<p>
</p></li><li><b>graph_as_str</b> has a dictionary parameter (representing t=
he graph); it
    returns a multi-line string (each line is ended by <b>'\n'</b>), which =
when
    printed shows the contents of the graph in the appropriate textual form
    (body is 4 lines; can you do it in 1?).
<p>
</p></li><li><b>reachable</b> has a dictionary parameter (representing the =
graph), a
    <b>str</b> start node in the graph (technically a key in the dictionary=
),
    and a <b>bool</b> controling tracing (whose default value is <b>False</=
b>);
    it returns a <b>set</b> of all the nodes reachable from it by following
    edges in the graph. Hint: I used the <b>get</b> dictionary function, wh=
ich=20
    allows a second argument that specifies what to do if the first argumen=
t
    (key) is not in the dictionary, because this function should not mutate
    the dictionary
    (body is 9 lines).
<p>
</p></li><li>Write a script at the bottom of this module
   (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user to ente=
r the
   file storing the graph and start node (rejecting any string that is not =
a
   source node in the graph) or the word <b>terminate</b>; calls these func=
tions
   with the entered information to solve the problem, and print the appropr=
iate information: the graph
   and the set containing all the node labels
   (body is 9 lines).
</li></ul>
Here is the basic algorithm for computing reachability; it is simple to exp=
lain
  and not (very) complicated to implement.
But, you have to understand these instructions and carefully translate them=
 into
  Python.
You should hand-simulate this algorithm using the graph above, and verify t=
hat
  it produces the results you expect, before coding the algorithm in Python=
.
You might be tempted to use recursion, but please don't: unless recursion i=
s
  done very carefully, <b>reachable</b> will run forever on graphs that con=
tain
  cycles: one of the input files is a graph that contains cycles.
<ol>
<li>To compute all the reachable nodes in a graph, create a <b>set</b>
   (initially empty) of reached nodes and a <b>list</b> (initially containi=
ng
   the  parameter start node) of nodes that we are going to explore (to fin=
d
   nodes they can reach).
<p>
</p></li><li>While the <b>exploring list</b> still has nodes, remove the fi=
rst one
    (recall the <b>pop</b> method for <b>lists</b>) and put it into the
    <b>reached set</b>; for all its associated destination nodes that are n=
ot
    already in the <b>reached set</b>, put them in the <b>exploring list</b=
>.
<p>
</p></li><li>When the <b>exploring list</b> becomes empty (can you argue th=
at this always
    will happen -there is no infinite looping), return the <b>reached set</=
b>.
</li></ol>
<p>

Read these instructions carefully, a few times.
Hand simulate these instructions to ensure that you understand the reachabi=
lity
  algorithm; use the data above, which is automatically traced in the examp=
le
  below.
Do not attempt to write any Python code to solve this problem until you
  understand this algorithm and can apply it to the data specified above.
Eventually you will write your Python code to produce such a trace
  conditionally.
</p><p>
Here is a trace (see the 3rd parameter to the <b>reachable</b> function
  described below, which activiates the trace) for graph specified above
  starting at the node <b>a</b>.
The order of values in the sets are arbitrary; I have written these data
  structures on multiple lines for formating purposes.

<b></b></p><pre><b>  reached set    =3D set()
  exploring list =3D ['a']
  moving node a from the exploring list into the reached set
  after adding all nodes reachable directly from a but not already in reach=
ed, exploring =3D ['c', 'b']=20

  reached set    =3D {'a'}
  exploring list =3D ['c', 'b']
  moving node c from the exploring list into the reached set
  after adding all nodes reachable directly from c but not already in reach=
ed, exploring =3D ['b', 'f', 'e']=20

  reached set    =3D {'a', 'c'}
  exploring list =3D ['b', 'f', 'e']
  moving node b from the exploring list into the reached set
  after adding all nodes reachable directly from b but not already in reach=
ed, exploring =3D ['f', 'e', 'd']=20

  reached set    =3D {'a', 'c', 'b'}
  exploring list =3D ['f', 'e', 'd']
  moving node f from the exploring list into the reached set
  after adding all nodes reachable directly from f but not already in reach=
ed, exploring =3D ['e', 'd', 'g', 'd']=20

  reached set    =3D {'a', 'c', 'f', 'b'}
  exploring list =3D ['e', 'd', 'g', 'd']
  moving node e from the exploring list into the reached set
  after adding all nodes reachable directly from e but not already in reach=
ed, exploring =3D ['d', 'g', 'd', 'd']=20

  reached set    =3D {'f', 'b', 'a', 'c', 'e'}
  exploring list =3D ['d', 'g', 'd', 'd']
  moving node d from the exploring list into the reached set
  after adding all nodes reachable directly from d but not already in reach=
ed, exploring =3D ['g', 'd', 'd', 'g']=20

  reached set    =3D {'f', 'b', 'a', 'c', 'e', 'd'}
  exploring list =3D ['g', 'd', 'd', 'g']
  moving node g from the exploring list into the reached set
  after adding all nodes reachable directly from g but not already in reach=
ed, exploring =3D ['d', 'd', 'g']=20

  reached set    =3D {'f', 'b', 'a', 'g', 'c', 'e', 'd'}
  exploring list =3D ['d', 'd', 'g']
  moving node d from the exploring list into the reached set
  after adding all nodes reachable directly from d but not already in reach=
ed, exploring =3D ['d', 'g']=20

  reached set    =3D {'f', 'b', 'a', 'g', 'c', 'e', 'd'}
  exploring list =3D ['d', 'g']
  moving node d from the exploring list into the reached set
  after adding all nodes reachable directly from d but not already in reach=
ed, exploring =3D ['g']=20

  reached set    =3D {'f', 'b', 'a', 'g', 'c', 'e', 'd'}
  exploring list =3D ['g']
  moving node g from the exploring list into the reached set
  after adding all nodes reachable directly from g but not already in reach=
ed, exploring =3D []</b></pre>



<h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should "match" this one (sets will match if they have the same
  contents, independent of their order).
You should also check that it works for other starting nodes, and
  a variety of starting nodes in the other graphs.

<b></b><pre><b>  Specify the file name representing the graph: <i>graph1.tx=
t</i>

  Graph: str (one source node) -&gt; [str] (sorted list of destination node=
s)
    a -&gt; ['b', 'c']
    b -&gt; ['d']
    c -&gt; ['e', 'f']
    d -&gt; ['g']
    e -&gt; ['d']
    f -&gt; ['d', 'g']

  Specify one start node (or terminate): <i>e</i>
  Specify choice for tracing algorithm[True]: <i>False</i>
  From the start node e, reachable nodes =3D {'g', 'e', 'd'}

  Specify one start node (or terminate): <i>x</i>
    Entry Error: 'x';  Illegal: not a source node
    Please enter a legal String

  Specify one start node (or terminate): <i>a</i>
  Specify choice for tracing algorithm[True]: <i>False</i>
  From the start node a, reachable nodes =3D {'g', 'f', 'e', 'd', 'c', 'b',=
 'a'}

  Specify one start node (or terminate): <i>terminate</i></b></pre>
Note that if the user specified <b>True</b> for tracing the algorithm, the
  program would also print the kinds of information shown above in the exam=
ple
  of tracing.
</td>
</tr></tbody>
</table>

<!-- Problem #2 Stable Marriage -->

</a><a name=3D"problem6">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width=3D"20%"><b>Problem #2: Stable Marriage</b></td>
<td width=3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that prompts the user for the names=
 of
  two files: a file representing the marriage preferences of a sequence of =
men,
  and a file representing the marriage preferences of a sequence of women;=
=20
  reads these files (storing this information in special data structures:=
=20
  dictionaries storing preference as lists); prints the dictionary/preferen=
ces
  of the men and women in a special form; runs the <b>Gale/Shapley</b>
  algorithm for finding a  <b>stable</b> marriage (tracing its progress, if
  required); prints the stable marriage as a set of man/woman tuples.
Please excuse my use of  heteronormative terms.
The problem is easier to state and understand when it uses two disjoint set=
s,
  men and women, whose members match only others outside their sets.

<p>
Suppose that N men and N women want to match in a heterosexual marriage.
Each produces a list of his/her preferences, ranking all members of the opp=
osite
  gender in highest to lowest order of acceptability as a partner.
The Gale/Shapley algorithm (described in detail below) matches men and wome=
n in
  <b>stable</b> marriages.
Marriages are stable when we cannot find a man and woman, who prefer each o=
ther
  to their match.
This scenario can be used to find stable matches in other contexts.
For example, this algorithm is used when medical school graduates match wit=
h
  hospitals for their residencies: the students and institutions rank each
  other and then the algorithm is run, processing these rankings.
In this case, the residents propose (act as the men in the description abov=
e)
  and the hospitals accept/reject the proposals (act as the women).
</p><p>
The fundamental data structure used throughout this process (as both argume=
nts
  to functions and the results returned by functions) is characterized by
  <b>{str:[str,[str]]}</b>, which describes a dictionary whose keys are
  associated with <b>2-lists</b>.
The dictionary keys are the names of men/women (<b>str</b>).
Each man/woman is associated with a <b>2-list</b>, whose first index is the
  current match of that person (<b>str</b>), and whose second index is a li=
st
  ranking other possible matches (<b>list</b> of <b>str</b>), from highest =
to
  lowest preference.
</p><p>
For example, the following dictionary represents information about three me=
n
  participating in marriages (<b>m1</b>, <b>m2</b>, <b>m3</b>):

<b></b></p><pre><b>  {'m1': [None, ['w3', 'w2', 'w1']],
   'm2': [None, ['w3', 'w1', 'w2']],
   'm3': [None, ['w2', 'w1', 'w3']]}</b></pre>
Here, <b>m1</b> is currently matched with no one (<b>None</b>) and
  ranks the women, in order of preference, as follows <b>w3</b> (hightes
  ranking) followed by  <b>w2</b> followed by <b>w1</b> (lowest ranking).
The other lines in this dictionary are interpreted similarly.
In this example (and the ones below) I have printed each key/value pair
  (alphabetically by key) on
  its own line; of course, if we print a dictionary in Python, it can print
  its key/value pairs in any order.
<p>
The following dictionary represents information about three women
  participating in marriages (<b>w1</b>, <b>w2</b>, and <b>w3</b>):
<b></b></p><pre><b>  {'w1': [None, ['m1', 'm2', 'm3']],
   'w2': [None, ['m2', 'm1', 'm3']],
   'w3': [None, ['m3', 'm2', 'm1']]}</b></pre>
Here, <b>w2</b> is currently matched with no one (<b>None</b>) and
  ranks the men, in order of preference, as follows <b>m2</b> (highest rank=
ing)
 followed by <b>m1</b> followed by <b>m3</b> (lowest ranking).
<p>
After running the Gale/Shapley algorithm (with men proposing to women, and
  women accepting or rejecting their proposals: more on these details later=
),
  these dictionaries are mutated to
<b></b></p><pre><b>  {'m1': ['w2', ['w3', 'w2', 'w1']],
   'm2': ['w3', ['w3', 'w1', 'w2']],
   'm3': ['w1', ['w2', 'w1', 'w3']]}

  {'w1': ['m3', ['m1', 'm2', 'm3']],
   'w2': ['m1', ['m2', 'm1', 'm3']],
   'w3': ['m2', ['m3', 'm2', 'm1']]}</b></pre>
Note the following <b>invariant</b>: if a man is matched to a woman in the =
man's
  dictionary, then that same woman must be matched to that man in the woman=
's
  dictionary.
Verify that this is true above.
<p>
Are these marriages stable?
First, let's look just at <b>m1</b>, who is matched to <b>w2</b>.
By his preferences, he would rather marry <b>w3</b>, but she prefers
  <b>m2</b> (her match) to <b>m1</b>.
Now, let's look just at <b>w1</b>, who is matched to <b>m3</b>.
By her preferences, she would rather marry <b>m1</b>, but he prefers
  <b>w2</b> (his match) to <b>w1</b>; also <b>w1</b> would prefer to marry
  <b>m2</b>, but he also prefers <b>w3</b> (his match) to <b>w1</b>.
If you check all the other men and women (do it) you will find that you can
  find no pair who would both rather marry each other, rather than their
  current matches, so these marriages are considered stable.

</p><h3>Input and Output:</h3>
Read files of men and women and their rankings of all members of the opposi=
te
  gender (highest to lowest preference), separated by semicolons, building =
a
  dictionary like the ones above (where each match is initially the special
  value <b>None</b>).
As described above, we annotate the structure of this dictionary as
  <b>{str:[str,[str]]}</b>.
<p>
In the file, the person's name appears first, followed by the names of all
  members of the opposite gender in highest to lowest preference, separated=
 by
  one semicolon character.
For example, the input file <b>men0.txt</b> contains the following
  lines: these line could appear in this order, or any other, but the
  each man's preferences must appear in decleasing order of preference.
<b></b></p><pre><b>  m1;w3;w2;w1
  m2;w3;w1;w2
  m3;w2;w1;w3</b></pre>
The first line means, <b>m1</b> ranks the members of the opposite gender in
  the order of preference from <b>w3</b>, <b>w2</b>, and <b>w1</b> in
  decreasing order of preference
Each line is guaranteed to start with a unique name, which is guaranteed to=
 be
  followed by all the names of all members of the opposite gender, each
  appearing once; and all names are separated by semicolons.
<p>
When you print such information, print each person on a separate line, foll=
owed
  by his/her match and preferences.
For example, the file above would print as:
<b></b></p><pre><b>  m1 -&gt; [None, ['w3', 'w2', 'w1']]
  m2 -&gt; [None, ['w3', 'w1', 'w2']]
  m3 -&gt; [None, ['w2', 'w1', 'w3']]</b></pre>
<p>
Note that the names on the lines must be <b>sorted</b> in alphabetical orde=
r;
  the <b>list</b> of preferences must appear in the same order they appeare=
d in
  the file.
There are multiple pairs of data files for this program, all named like
  <b>men0.txt</b> and <b>women0.txt</b>; Test/debug your program on the fir=
st
  file; when you are done, test it on the remaining files.
</p><p>

Here is a description of the <b>Gale/Shapley Algorithm</b> for computing a
  stable marriage.
You must implement this algorithm, as it is described below.
There might be other stable marriages, but this algorithm will always compu=
te
  the same one.
This algorithm is not symmetric: here men get to propose to women and women=
 get
  to accept/reject men.
If we ran the algorithm the other way (with women proposing to men, and men
  accepting or rejecting women, we would also get a stable marriage, but th=
e
  matches might be different.
</p><p>
It is fairly straightforward to specify the Gale/Shapley algorithm, which i=
s
   straightforward to implement in Python.
But, first you must understand these English instructions, and only then ca=
n
  you carefully translate them into Python code.
You should hand-simulate this algorithm using the data above, and verify th=
at
  it produces the results that you expect, before coding the algorithm in
  Python.
</p><ol>
<li>Make a copy of only the men's data structure: create a new dictionary t=
hat
      copies all data, including copying the lists, from the original
      dictionary.
    We make a copy because the algorithm below mutates the men's data
      structure, but we don't want its matching argument to change.
    In the steps below, mutate the copy, not the parameter.
<p>
</p></li><li>Make an <b>unmatched</b> set that contains the names of all un=
matched men.
    Initially, all men are unmatched, so this set will contain all the men =
in
    the men's dictionary.
<p>
</p></li><li>Repeat the following process until there are no more unmatched=
 men.
<ol type=3D"a" start=3D"a">
  <li>Remove (see the <b>pop</b> operation on sets) any man from the set of
        unmatched men.
<p>
  </p></li><li>Determine the woman that is highest on his preference list a=
nd remove that
        woman from his preference list (see the <b>pop</b> operation on lis=
ts).
      This man will try to propose to that woman.
  <ul>
     <li>If that woman is unmatched: match this man and that woman.
     </li><li>If that woman is matched, but pefers this man to her current =
match:=20
           unmatch that woman and her current match and add the man that sh=
e
           previously matched (he is now unmatched) to the set of unmatched=
 men.
         Then, match this man and that woman.
     </li><li>If that woman is matched, and pefers her current match to thi=
s man,
           just add this man (still unmatched) back to the set of unmatched=
 men.
   </li></ul>
</li></ol>
</li></ol>

Read these instructions carefully, a few times.
Do not attempt to write any Python code to solve this problem until you
  understand this algorithm and can apply it to the data specified below.
Hand simulate these instructions to ensure that you understand the algorith=
m;
  use the data above, which is automatically traced in the example below.
Eventually you will write your Python code to produce such a trace
  conditionally.
<p>
Here is a trace (see the 3rd parameter to the <b>make_match</b> function be=
low)
  for the men and women data structures specified above.
<b></b></p><pre><b>  Women Preferences (unchanging)
    w1 -&gt; [None, ['m1', 'm2', 'm3']]
    w2 -&gt; [None, ['m2', 'm1', 'm3']]
    w3 -&gt; [None, ['m3', 'm2', 'm1']]

  Men Preferences (current)
    m1 -&gt; [None, ['w3', 'w2', 'w1']]
    m2 -&gt; [None, ['w3', 'w1', 'w2']]
    m3 -&gt; [None, ['w2', 'w1', 'w3']]
=20
  unmatched men =3D {'m2', 'm3', 'm1'}=20

  m2 proposes to w3, who is currently unmatched, accepting proposal

  Men Preferences (current)
    m1 -&gt; [None, ['w3', 'w2', 'w1']]
    m2 -&gt; ['w3', ['w1', 'w2']]
    m3 -&gt; [None, ['w2', 'w1', 'w3']]
=20
  unmatched men =3D {'m3', 'm1'}=20

  m3 proposes to w2, who is currently unmatched, accepting proposal

  Men Preferences (current)
    m1 -&gt; [None, ['w3', 'w2', 'w1']]
    m2 -&gt; ['w3', ['w1', 'w2']]
    m3 -&gt; ['w2', ['w1', 'w3']]

  unmatched men =3D {'m1'}=20

  m1 proposes to w3, who is currently matched, rejecting the proposal (like=
s current match better)

  Men Preferences (current)
    m1 -&gt; [None, ['w2', 'w1']]
    m2 -&gt; ['w3', ['w1', 'w2']]
    m3 -&gt; ['w2', ['w1', 'w3']]
=20
  unmatched men =3D {'m1'}=20

  m1 proposes to w2, who is currently matched, accepting the proposal (like=
s new match better)

  Men Preferences (current)
    m1 -&gt; ['w2', ['w1']]
    m2 -&gt; ['w3', ['w1', 'w2']]
    m3 -&gt; [None, ['w1', 'w3']]
  =20
  unmatched men =3D {'m3'}=20

  m3 proposes to w1, who is currently unmatched, accepting the proposal

  Tracing terminated, the final matches: {('m1', 'w2'), ('m3', 'w1'), ('m2'=
, 'w3')}</b></pre>

The resulting matches form stable marriages (the ones discussed above, when=
 we
  discussed the meaning of stability).
When this algorithm stops, the local copy of the men's data structure has
  become
<b><pre>  m1 -&gt; ['w2', ['w1']]
  m2 -&gt; ['w3', ['w1', 'w2']]
  m3 -&gt; ['w1', ['w3']]</pre></b>
<p>
Note that each man's preference list shows only the women he did not propos=
e to.
Finally, if we used the same algorithm but let the women propose to the men=
,
  who accept or reject the proposals, we would get the following matches.
<b></b></p><pre><b>Tracing terminated, the final matches: {('w2', 'm2'), ('=
w1', 'm1'), ('w3', 'm3')}</b></pre>
<p>
These matches are all different, but the marriages are all still stable.
So, who proposes to whom can determine the results of the algorithm: we can=
 run
  the program, swapping the men's/women's files, to see if it produces an
  alternative stable matching.
</p><p>

</p><h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>read_match_preferences</b> has an open (file) parameter; it returns =
the
       dictionary representing each man (or women, depending on which file =
is
       read) and his/her match (initially <b>None</b>) and preferences
       (body is 6 lines).
<p>
</p></li><li><b>dict_as_str</b> has a men or women dictionary, key <b>funct=
ion</b>
      (default <b>None</b>) and <b>bool</b> (default <b>False</b>) as
       parameters; it returns a multi-line string (each line is ended by
       <b>'\n'</b>), which when printed shows the contents of the
       dictionary in the appropriate textual form.
    The key function determines the ordering and the <b>bool</b> determines
      whether to reverse it: like the <b>key</b> and <b>reverse</b> paramet=
ers
      used for <b>sort</b>/<b>sorted</b> in Python.
    This function is used to print both the men's/women's dictionaries, in =
the
      form dicussed above in the <b>Input/Output</b> section.
    <p>
    <b>Important:</b> The key function (and its use when iterating over the
      dictionary in <b>dict_as_str</b>) must assume that its argument is a
      <b>key</b> in the dictionary, not an <b>item</b>;
      otherwise the batch self-check test will fail even if your code works=
.
     (body is 4 lines; can you do it in 1?).
</p><p>
</p></li><li><b>who_prefer</b> has a list (of <b>str</b>) of preferences an=
d two values
       (<b>str</b>) that are in the list; it returns the value with the hig=
her
       preference: e.g., <b>who_prefer(['w3','w1','w2'], 'w2', 'w3')</b> re=
turns
       <b>w3</b> -the one present earlier in the list.
    Hint: I used this function in <b>make_match</b> defined below
    (body is 1 line).
<p>
</p></li><li><b>extract_matches</b> has a men dictionary as a parameter; it=
 returns a
       set of 2-tuples: each has a match with the man in index 0 and the wo=
man
       in index 1.
    Hint: I used this function in <b>make_match</b> defined below
       (body is 1 line).
<p>
</p></li><li><b>make_match</b> has a men and women dictionary as parameters=
, as well
         as a tracing parameter whose default value is <b>False</b>; it ret=
urns
         a set of 2-tuples: each has a match with the man in index 0 and th=
e
         woman in index 1.
       This function uses the Gale/Shapley algorithm described above to
         find the match; if tracing is <b>True</b> it creates a trace in th=
e
         form the example trace shown above
       (body is 25 lines, but only 18 lines without tracing code).
<p>
<!--- don't include this
<li><b>stable</b> has a men and women dictionary as parameters; it returns
       whether (<b>bool</b>) the match is stable (defined above).
       Hint: for all possible man/woman combinations, if you can find
          one where the man prefers the woman to his match, and the woman
          prefers the man to her match, the match is not stable; if you can=
not
          find an man/woman satisfying this criteria, the match is stable
          (body is 6 lines).
<p>
--->
<!--- include this --->
</p></li><li>Write a script at the bottom of this module
    (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user to ent=
er the
    files storing the men and women preferences; reads these files and crea=
tes
    the required dictionaries; labels and prints both
    dictionaries (using <b>dict_as_str</b>); prompts the user about whether=
 to
    trace the matching, then computes (using <b>make_match</b>) and prints =
the
    stable matches.
</li></ul>
<p>

</p><h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should match this one.
<pre><b>  Specify the file name representing the preferences for men: <i>me=
n0.txt</i>
  Specify the file name representing the preferences for women: <i>women0.t=
xt</i>

  Men Preferences
    m1 -&gt; [None, ['w3', 'w2', 'w1']]
    m2 -&gt; [None, ['w3', 'w1', 'w2']]
    m3 -&gt; [None, ['w2', 'w1', 'w3']]

  Women Preferences
    w1 -&gt; [None, ['m1', 'm2', 'm3']]
    w2 -&gt; [None, ['m2', 'm1', 'm3']]
    w3 -&gt; [None, ['m3', 'm2', 'm1']]

  Specify choice for tracing algorithm[True]: <i>False</i>

  The final matches: {('m1', 'w2'), ('m3', 'w1'), ('m2', 'w3')}</b></pre>
<p>
Note that if the user specified <b>True</b> for tracing the algorithm, the
  program would also print all the information shown above in the example o=
f
  tracing the Gale/Shapley algorithm.
Finally, you can also try processing the <b>men1.txt/women1.txt</b> and
  <b>men2.txt/women2.txt</b> pairs of files.
You can print these data files and hand-simulate the Gale/Shapely algoriths=
m
  on them to compute their stable matches.
You can also feed the women file in as the men file, and the men file in as
  the women file, to see the match that results from letting women propose =
and
  men accept or reject: it can produce different matching pairs, but the
  matching pairs it produces will be stable.
</p></td>
</tr></tbody>
</table>


<!-- Problem #2 Instant Runoff

<a name=3D"problem6">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width =3D"20%"><b>Problem #2: Instant Runoff Voting</b></td>
<td width =3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that prompts the user to enter the =
name
  of a file representing the preferences of a sequence of voters;
  reads the file (storing its information in a dictionary);
  prints the voter preferences/dictionary in a special form;
  repeatedly displays the vote count for ballots (sorted both by candidate =
name
  and by vote count), eliminating from the election the candidate(s) receiv=
ing
  the fewest votes, until one candidate (the winner) remains or no candidat=
es
  remain (a tie among the candidates on the final ballot).
<p>
This form of election is known as <b>instant runoff voting</b>.
Every voter submits preferences that rank all the candidates in the electio=
n,
  from highest preference candidate (most favorite) to lowest preference
  candidate (least favorite): we will use a <b>list</b> for this purpose</b=
>,
  where "earlier in the <b>list</b>" means "higher preference".
All the candidates appear on the first ballot, so each voter votes for his
  highest preference candidate.
Then the candidate(s) with the fewest number of votes are removed from the
  election: if more than one candidate receives the least number of votes, =
all
  with that number are removed from the election.
<p>
During the second ballot, votes are allowed only for the
  <b>remaining candidates</b>: there is at least 1 fewer candidate.
If a  voter's highest preference candidate has been removed from the electi=
on,
  then his/her second ranked candidate should receive the vote; likewise, i=
f
  his/her second ranked candidate has been removed from the election, then
  his/her third ranked candidate should receive the vote .... this process
  continues until a voter voters for his/her highest preference candidate w=
ho
  is still in the election.
<p>
The number of votes cast in each ballot should always be the same as the nu=
mber
  of voters: each voter votes for his/her most preferred candidate <b>who i=
s
  still in the election</b>.
This ballot process continues until either 1 candidate remains, or 0 candid=
ates
  remain (meaning that all the remaining candidates tallied the same number
  of votes, and all were removed, so the election is a tie among them).
<p>
Read these instructions carefully, a few times.
Do some hand simulations to ensure you understand the algorithm.
Do not attempt to write any Python code to solve this problem until you
  understand this algorithm and can apply it to the data specified below.
You can discuss the algorithm with the class staff and each other; but, you
  cannot discuss your code with other students.

<h3>Input and Output:</h3>
Read a file of voters and their ranking of the candidates (highest to lowes=
t
  preference), separated by semicolons, building a dictionary whose key is =
each
  voter and whose associated value is a <b>list</b> of candidates ranked by
  that voter (they appear in the file in order, from highest to lowest
  preference).
We annotate this dictionary as <b>{str:[str]}</b>.
<p>
In the file, the voter's name appears first, followed by the names of all t=
he
  candidates in the election in highest to lowest preference (names may be
  entire words, not just single characters) separated by one semicolon
  character.
For example, the input file <b>votepref1.txt</b> contains the following
  lines (which could appear in this order, or any other):
<b><pre>  A;X;Y;Z
  B;Y;Z;X
  C;Y;Z;X
  D;Z;X;Y
  E;Z;X;Y</pre></b>
The first line means, voter <b>A</b> ranks candidate <b>X</b> first,
  candidate <b>Y</b> second, and candidate <b>Z</b> third.
The second line means, voter <b>B</b> ranks candidate <b>Y</b> first,
  candidate <b>Z</b> second, and candidate <b>X</b> third.
Each line will have a unique voter and a permutation of all the=20
  candidates in the election.
<p>
Print each voter on a separate line, followed by his/her preferences.
That is, each line contains the voter and his/her complete ranking of the
  candidates.
For example, the file above would print as:
<b><pre>  Preferences: voter -> [candidates in order]
     A -> ['X', 'Y', 'Z']
     B -> ['Y', 'Z', 'X']
     C -> ['Y', 'Z', 'X']
     D -> ['Z', 'X', 'Y']
     E -> ['Z', 'X', 'Y']</pre></b>
<p>
Note that the voter names must be <b>sorted</b> in alphabetical order;
  the <b>list</b> of preferences must appear in the same order they appeare=
d in
  the file.
There are multiple data files for this program: <b>votepref1.txt</b>,=20
  <b>votepref2.txt</b>, <b>votepref3.txt</b> and <b>votepref4.txt</b>;
  test/debug your program on the first file; when you are done, test it on =
the
  remaining files.
<p>
<b>Algorithm:</b>
Start with a <b>set</b> of all the candidates.
Evaluate the ballot to determine how many votes each candidate received.
Print this vote count two ways: sorted by name in alphabetical order and
   sorted by votes in numerical order (in decreasing order).
Remove the candidate(s) receiving the fewest votes, and repeat this process
  until only one or no candidates remain.
Finally, print the outcome of the election: a single candidate winner or a =
tie.
An example interaction (processing the preferences above) might be
<b><pre>  Vote count on ballot #1: candidates (sorted alphabetically) using=
 only candidates in set {'X', 'Y', 'Z'}
    X -> 1
    Y -> 2
    Z -> 2

  Vote count on ballot #1: candidates (sorted numerically) using only candi=
dates in set {'Y', 'X', 'Z'}
    Y -> 2
    Z -> 2
    X -> 1

  Vote count on ballot #2: candidates (sorted alphabetically) using only ca=
ndidates in set{'Y', 'Z'}
    Y -> 3
    Z -> 2

  Vote count on ballot #2: candidates (sorted numerically) using only candi=
dates in set {'Y', 'Z'}
    Y -> 3
    Z -> 2

  Election winner is {'Y'}</pre></b>
The first ballot consisted of all three candidates, <b>X</b>, <b>Y</b>,=20
  and <b>Z</b>.
For this ballot, the votes were counted and printed; candidate <b>X</b>
  received the fewest number of votes so he/she is eliminated from the next
  ballot.
The second ballot consisted of two candidates, <b>Y</b> and <b>Z</b>.
For this ballot: <b>A</b> votes for <b>Y</b>, who is his/her second highest
  preference because <b>X</b>, his first highest preference, was removed fr=
om
  the election; <b>B</b> through <b>E</b> vote for their highest preference
  candidate, who all remain in the election.
These votes are counted and printed; candidate <b>Z</b> received the fewest
  number of votes so is eliminated from the next ballot.
There is only one candidate remaining so <b>Y</b> is declared the winner.
An alternative outcome prints
<b>Tie among final candidates: cannot choose one unique winner</b>.

<h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>read_voter_preferences</b> has an open (file) parameter; it returns =
the
       dictionary representing each voter and his/her preferences
      (body is 5 lines).
<p>
<li><b>dict_as_str</b> has a dictionary, key <b>function</b>
      (default <b>None</b>) and <b>bool</b> (default <b>False</b>) as
       parameters; it returns a multi-line string (each line is ended by
       <b>'\n'</b>), which when, which when printed shows the contents of t=
he
       dictionary in the appropriate textual form.
    The key function determines the ordering and the <b>bool</b> determines
      whether to reverse it: like the <b>key</b> and <b>reverse</b> paramet=
ers
      used for <b>sort</b>/<b>sorted</b> in Python.
    This function is used to print both the voter preference dictionary and
      the vote count dictionary for each ballot.
    <p>
    <b>Important:</b> The key function (and its use when iterating over the
      dictionary in <b>dict_as_str</b>) must assume that its argument is a
      <b>key</b> in the dictionary, not an <b>item</b>;
      otherwise the batch self-check test will fail even if your code works=
.
     (body is 4 lines; can you do it in 1?).
<p>
<li><b>evaluate_ballot</b> has a dictionary of voter preferences
         (see <b>read_voter_preferences</b>) and a <b>set</b> of the remain=
ing
         candidates as parameters; it returns a dictionary whose keys are t=
hese
         candidates and whose values are the number of votes they received =
on
         this ballot, based on the description of the
         <b>instant runnoff voting</b> algorithm.
       Remember to count only one vote per voter, for his/her highest ranke=
d
         candidate who is still in the election; hint: I used a <b>break</b=
>
         statement in one loop
       (body is 7 lines).
<p>
<li><b>remaining_candidates</b> has a dictionary as a parameter whose keys =
are
          candidates and whose values are the number of votes they received
          (see <b>evaluate_ballot</b>); it returns a set containing all tho=
se
          candidates remaining in the election (the one(s) receiving the
          fewest number of votes are absent).
       Note that if all the candidates receive the same number of votes, th=
en
         this function returns an empty <b>set</b>.
       (body is 2 lines).
<p>
<li><b>run_election</b>  has an open (file) parameter; it returns a <b>set<=
/b>
        that is empty (signifying no winner for this election) or contains =
one
        value (the winner of the election).
      In the process of computing its result to return, it calls the functi=
ons
        above and prints all the required information: see the
        <b>Sample Interaction</b> below
      (body is 13 lines).
<p>
<li>Write a script at the bottom of this module
    (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user for th=
e
    file describing the voter preferences and calls <b>run_election</b> to
    do this task.
</ul>
<h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should match this one.
<pre><b>  Enter the file name describing all the voter preferences: <i>vote=
pref1.txt</i>

  Preferences: voter -> [candidates in order]
    A -> ['X', 'Y', 'Z']
    B -> ['Y', 'Z', 'X']
    C -> ['Y', 'Z', 'X']
    D -> ['Z', 'X', 'Y']
    E -> ['Z', 'X', 'Y']
 =20
  Vote count on ballot #1: candidates (sorted alphabetically) using only ca=
ndidates in set {'Z', 'Y', 'X'}
    X -> 1
    Y -> 2
    Z -> 2

  Vote count on ballot #1: candidates (sorted numerically) using only candi=
dates in set {'Y', 'X', 'Z'}
    Y -> 2
    Z -> 2
    X -> 1

  Vote count on ballot #2: candidates (sorted alphabetically) using only ca=
ndidates in set {'Y', 'Z'}
    Y -> 3
    Z -> 2

  Vote count on ballot #2: candidates (sorted numerically) using only candi=
dates in set {'Y', 'Z'}
    Y -> 3
    Z -> 2

  Election winner is {'Y'}</b></pre>
<p>
You can also try processing the <b>votepref2.txt</b> file (which leads to
  printing <b>Tie among final candidates: cannot choose one unique winner</=
b>),
 <b>votepref3.txt</b>, and <b>votepref4.txt</b>.
</td>
</tbody>
</table>
-->

<!-- Problem 3 -->

</a><a name=3D"problem3">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width=3D"20%"><b>Problem #3: Finite Automata</b></td>
<td width=3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that prompts the user for the name =
of a
   file representing a finite automaton: indicating its <b>states</b> and
       input-&gt;state <b>transitions</b>;
   reads the information in the file (storing the finite automaton in a
     dictionary);
   prints the finite-automaton/dictionary in a special form;
   prompts the user for the name of a file storing the start-state
      and inputs to process (each line in the file contains this combinatio=
n);
   repeatedly processes these lines, computing the results of the finite
      automaton on each input, and then prints the results.
Note that a finite automaton is really a <b>program</b>; in this problem we=
 are
  reading a program from a file and then executing it (running the finite
  automaton) on various inputs.
So, we are really writing a compiler/interpreter for a small programming
  language.
<p>
A <b>finite  automaton</b> (FA) is an machine that is sometimes called a
  Deterministic Finite Automaton (DFA; see the next problem for an NDFA: a
  non-deterministic finite automaton).
An FA is described by its <b>states</b> and its <b>transitions</b>:
  each <b>transition</b> for a <b>state</b> specifies an <b>input</b> and w=
hat
  <b>state</b> in the FA that input leads to.
We can illustrate an FA as a graph with state labels in circles and edge la=
bels
  for transitions (see below).
</p><p>

</p><h3>Input and Output:</h3>
Read a file that describes a FA: each line contains a state and an
  arbitrary number of input-&gt;state <b>transitions</b>.
Build a dictionary such that each key is a <b>str</b> state and whose assoc=
iated
  value is another dictionary specifying all the transitions from that stat=
e:
  this second dictionary has keys that are <b>str</b> inputs and associated
  values are <b>str</b> states.
The first token on each line is the <b>str</b> state and the remaining toke=
ns
  (always coming in pairs) are <b>str</b> inputs and their resulting states=
.
All tokens (which can comprise any number of characters) are separated by o=
ne
  semicolon character.
We annotate this dictionary as <b>{str:{str:str}}</b>.
<p>

For example, the input file <b>faparity.txt</b> contains the following line=
s
  (which could appear in this order, or any other and still specify the sam=
e
  FA):
<b></b></p><pre><b>  even;0;even;1;odd
  odd;0;odd;1;even</b></pre>
Here is a picture of the <b>parity</b> FA.
It graphically illustrates the two <b>states</b> (<b>even</b> and <b>odd</b=
>)
  and their <b>transitions</b>, using <b>inputs</b> (<b>0</b> and <b>1</b>)
  that always lead back to one of these two states.
<p>

<img src=3D"https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/ima=
ges/parity.jpg">
</p><p>

Here, the state <b>even</b> (meaning it has seen an even number of <b>1</b>
  inputs so far) is a key in the main dictionary.
Its value is a dictionary with two key/value pairs <b>0</b>-&gt;<b>even</b>
  and <b>1</b>-&gt;<b>odd</b>.
It means that in the <b>even</b> state, if the input is a <b>0</b> the
  FA stays in the <b>even</b> state; if the input is a <b>1</b> the
  FA goes to the <b>odd</b> state.
And similarly (the next line) means that for the <b>odd</b> state, if the i=
nput
  is a <b>0</b> the FA stays in the <b>odd</b> state; if the input is a
  <b>1</b> the FA goes back to the <b>even</b> state.
So, seeing an input of <b>0</b> keeps the FA in the same state;
  seeing an input of <b>1</b> flips the FA into the other state.
</p><p>

Print the finite automaton, one state (and its transitions) per line;
  the states are printed alphabetically and the transition dictionary
  for each state is printed as a <b>list</b> of input/state items (tuples)
  such that these are printed alphabetically by the inputs.
</p><p>
For example, the file above would print as:
<b></b></p><pre><b>  Specified details of this Finite Automaton
    even transitions: [('0', 'even'), ('1', 'odd')]
    odd transitions: [('0', 'odd'), ('1', 'even')]</b></pre>
<p>
Note that there are multiple data files for this program: <b>faparity.txt</=
b>
  and <b>fadivisibleby3.txt</b>; test/debug your program on=20
  the first file; when you are done, test it on the last file.
Draw the FA represented by each for to ensure that your code correctly
  prints and computes with it.
<b>Important:</b> This task is <b>not</b> to write a Python code that simul=
ates
  the Parity FA; it is to write code that simulates <b>any</b> FA, whose
  description it reads from a file.
</p><p>
Next, repeatedly read and process lines from a second input file, computing=
 the
  results of the finite automaton running on the specified start-state with=
 its
  inputs; then print out the results in a special form.
Each line in the file contains a start-state followed by a sequence of inpu=
ts
  (all separated by semicolons).
The start-state will be a state in the FA (it is a key in the outer diction=
ary)
  the inputs may specify legal or illegal transitions (may or may not be ke=
ys
  in some inner dictonary).
</p><p>
For example, the input file <b>fainputparity.txt</b> contains the following
  three lines:
<b></b></p><pre><b>  even;1;0;1;1;0;1
  even;1;0;1;1;0;x
  odd;1;0;1;1;0;1</b></pre>
The first line means, the start-state is <b>even</b> and the
  inputs are <b>1</b>, <b>0</b>, <b>1</b>, <b>1</b>, <b>0</b>, and <b>1</b>=
.
<p>
The result of processing each line is to print the start-state, and then ea=
ch
  input and the new state it transitions to, and finally print the stop-sta=
te.
For the <b>parity</b> FA and the first line in this file, it should print
<b></b></p><pre><b>Start state =3D even
  Input =3D 1; new state =3D odd
  Input =3D 0; new state =3D odd
  Input =3D 1; new state =3D even
  Input =3D 1; new state =3D odd
  Input =3D 0; new state =3D odd
  Input =3D 1; new state =3D even
Stop state =3D even</b></pre>
<p>
Note that the second line contains an input <b>x</b> which is not a legal i=
nput
  allowed in any state; any such input should stop the simulation for that =
line
  only, continuing to start a new simulation for all following lines (as
  illustrated in the <b>Sample Interaction</b>).
</p><h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>read_fa</b> has an open (file) parameter; it returns the dictionary
     representing the finite automaton; <b>hint</b>: I used splicing and th=
e
     <b>zip</b> function to build the inner dictionaries.
     (body is 6 lines).
<p>
</p></li><li><b>fa_as_str</b> has a dictionary parameter (representing the =
FA); it
    returns a multi-line string (each line is ended by <b>'\n'</b>), which =
when
    printed shows the contents of the FA in the appropriate textual form:
    sorted alphabetically by state, with a state's transitions sorted by th=
eir
    input value (body is 4 lines; can you do it in 1?).
<p>
</p></li><li><b>process</b> has a dictionary parameter (representing the FA=
),
    a <b>str</b> parameter (representing the start-state), and a <b>list</b=
>
    parameter (representing a <b>list</b> of <b>str</b> inputs); it returns=
 a
    <b>list</b> that contains the start-state followed by <b>tuples</b> tha=
t
    show the input and resulting state after each transition.
    For the example shown above, <b>process</b> returns the following
    <b>list</b>.
<b><pre>['even', ('1', 'odd'), ('0', 'odd'), ('1', 'even'), ('1', 'odd'), (=
'0', 'odd'), ('1', 'even')]</pre></b>
    Finally, if an input is illegal (is not the key in some transition for =
the
    current state), say
    <b>'x'</b>, for the parity FA, then <b>process</b> should terminate wit=
h
    the last <b>tuple</b> in the <b>list</b> indicating a problem:
     <b>('x', None)</b>
   (body  is 9 lines).
<p>
</p></li><li><b>interpret</b> has a <b>list</b> parameter (the <b>list</b> =
result
    produced by  <b>process</b>); it returns a multi-line string (each line=
 is
    ended by <b>'\n'</b>), which when printed illustrates the results of
    processing an FA on an input in the appropriate textual form.
    See how it prints the example <b>list</b> argument shown above in the
      output further above.
    Also see the <b>Sample Interaction</b> below to see how it prints
    <i>input errors</i>: see the middle example
   (body is 9 lines).
<p>
</p></li><li>Write a script at the bottom of this module
    (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user to ent=
er the
    file describing the FA, prints it, prompts the user to enter the file
    containing lines of start-states and input, simulates the FA on each li=
ne,
    printing the results in the appropriate textual form
    (body is 7 lines).
</li></ul>
<p>

</p><h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should match this one.
<b></b><pre><b>  Specify the file name representing the Finite Automaton: <=
i>faparity.txt</i>

  Specified details of this Finite Automaton
    even transitions: [('0', 'even'), ('1', 'odd')]
    odd transitions: [('0', 'odd'), ('1', 'even')]

  Specify the file name representing multiple start-states and their inputs=
: <i>fainputparity.txt</i>

  Computed FA trace from its start-state
  Start state =3D even
    Input =3D 1; new state =3D odd
    Input =3D 0; new state =3D odd
    Input =3D 1; new state =3D even
    Input =3D 1; new state =3D odd
    Input =3D 0; new state =3D odd
    Input =3D 1; new state =3D even
  Stop state =3D even
 =20
  Computed FA trace from its start-state
  Start state =3D even
    Input =3D 1; new state =3D odd
    Input =3D 0; new state =3D odd
    Input =3D 1; new state =3D even
    Input =3D 1; new state =3D odd
    Input =3D 0; new state =3D odd
    Input =3D x; illegal input: simulation terminated
  Stop state =3D None

  Computed FA trace from its start-state
  Start state =3D odd
    Input =3D 1; new state =3D even
    Input =3D 0; new state =3D even
    Input =3D 1; new state =3D odd
    Input =3D 1; new state =3D even
    Input =3D 0; new state =3D even
    Input =3D 1; new state =3D odd
  Stop state =3D odd</b></pre>
<p>
You can also try the <b>fadivisibleby3.txt</b> finite automaton file, which
  determines whether an integer (sequence of digits) is divisible by <b>3</=
b>:
   it is divisible if the  finite automaton stops in state <b>rem0</b>.
It's input file <b>fainputdivisibleby3.txt</b> tries the number
  <b>12,435,711</b>, which is divisible by <b>3</b> and number <b>823</b>,
  which is not divisible by <b>3</b>: dividing <b>823</b> by <b>3</b> leave=
s a
  remainder of <b>1</b>.
</p></td>
</tr></tbody>
</table>


<!-- Problem 4 -->

</a><a name=3D"problem4">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width=3D"20%"><b>Problem #4: Non-Deterministic FA</b></td>
<td width=3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that solve, for a Non-Deterministic
   Finite Automaton, the same problem that was solved for a Deterministic F=
inite
   Automaton in Problem #3 (above).
Read about the differences between these two automata (below).
Hint: Adapt your code for the FA problem to solve the more general NDFA pro=
blem.
<p>
A non-deterministic finite automaton (NDFA) is machine described by its
  <b>states</b> and its <b>transitions</b>:
  each <b>transition</b> for a <b>state</b> specifies an <b>input</b> and a
  <b>set</b> of <b>states</b> (more than one is allowed) that input can lea=
d
  to: <b>sets</b> with <b>more than one states</b> is what makes it
  non-deterministic.
We can illustrate a NDFA as a graph with state labels in circles and edge
  labels for transitions (see below).
The critical difference between an FA and an NDFA is that an NDFA can have
  multiple edges with the same label going to different states (we'll see h=
ow
  to represent and simulate such transitions below).
</p><p>

</p><h3>Input and Output:</h3>
Read a file that describes a NDFA: each line contains a state and an
  arbitrary number of input-&gt;state <b>transitions</b>.
Build a dictionary such that each key is a <b>str</b> state and whose assoc=
iated
   value is another dictionary specifying all the transitions from that sta=
te:
   this second dictionary has keys that are <b>str</b> inputs and associate=
d
   values that are <b>sets</b> of <b>str</b> states: all the states a parti=
cular
   input can lead to.
The first token on each line is the <b>str</b> state and the remaining toke=
ns
  (always coming in pairs) are <b>str</b> inputs and states.
All tokens (which can comprise any number of characters) are separated by o=
ne
  semicolon character.
We annotate this dictionary as <b>{str:{str:{str}}}</b>.
<p>

For example, the input file <b>ndfaendin01.txt</b> contains the following l=
ines
  (which could appear in this order, or any other and still specify the sam=
e
  NDFA):
<b></b></p><pre><b>  start;0;start;1;start;0;near
  near;1;end
  end</b></pre>
Here is a picture of the <b>endin01</b> NDFA.
It graphically illustrates the three <b>states</b> (<b>start</b>, <b>near</=
b>,
  and <b>end</b>) and their <b>transitions</b>, using <b>inputs</b> (<b>0</=
b>
  and <b>1</b>).
<p>

<img src=3D"https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/ima=
ges/endin01.jpg">
</p><p>

Here, the state <b>start</b> is a key in the main dictionary.
It's value is a dictionary with two key/value pairs: <b>0</b> mapping to th=
e
  <b>set</b> containing <b>start</b> and <b>near</b>, and <b>1</b> mapping =
to
  the <b>set</b> containing just <b>start</b>.
It means that in the <b>start</b> state, if the input is a <b>0</b> the
  NDFA can stay in the <b>start</b> state or it can go to the <b>near</b>
  state; if the input is a <b>1</b> the NDFA must stay in the <b>start</b>
  state.
And similarly the next line means that in the <b>near</b> state, if the
  input is a <b>1</b> the NDFA must go into the <b>end</b> state.
The last line means that the <b>end</b> state has no transitions out of it.
</p><p>

Print the NDFA, one state (and its transitions) per line;
  the states are printed alphabetically and the transition dictionary
  for each state is printed as a <b>list</b> of input/set of state items
  (2-tuples) such that these are printed alphabetically by the inputs,
  and the set of states for each input is printed as an alphabetically sort=
ed
  list (e.g., <b>near</b> comes before <b>start</b>).
Note that the state <b>end</b> is a key in the main dictionary, whose
  associated transitions are an empty dictionary.
</p><p>

For example, the file above would produce:
<b></b></p><pre><b>  Specified details of this Non-Deterministic Finite Aut=
omaton=20
    end transitions: []
    near transitions: [('1', ['end'])]
    start transitions: [('0', ['near', 'start']), ('1', ['start'])]</b></pr=
e>
<p>
Note that there are multiple data files for this program: <b>ndfaendin01.tx=
t</b>
  and <b>ndfatrain.txt</b> and <b>ndfare.txt</b>;; test/debug your program =
on=20
  the first file; when you are done, test it on the last file.
Draw the FA represented by each for to ensure that your code correctly
  prints and computes with it.
</p><p>
Next, repeatedly read and process lines from a second input file, computing=
 the
  results of the non-determinisitc finite automaton on the specified
  start-state with its inputs ; then print out the results in a special for=
m.
Each line in the file contains a start-state followed by a sequence of inpu=
ts
  (all separated by semicolons).
The start-state will be a state in the FA (it is a key in the outer diction=
ary)
  the inputs may specify legal or illegal transitions (may or may not be ke=
ys
  in some inner dictionary).
</p><p>
For example, the input file <b>ndfainputendin01.txt</b> contains the follow=
ing
  two lines:
<b></b></p><pre><b>  start;1;0;1;1;0;1
  start;1;0;1;1;0;0</b></pre>
For example, the first line means, the start-state is <b>start</b> and the
  inputs <b>1</b>, <b>0</b>, <b>1</b>, <b>1</b>, <b>0</b>, and <b>1</b>.
<p>
The result of processing each line is to print the start-state, and then ea=
ch
  input and the new states (plural) it could transition to (the <b>could</b=
>
  is what makes it non-deterministic), and finally print the stop-states.
For the <b>ndfaendin01</b> NDFA and the first line in this file, it should =
print
<b></b></p><pre><b>  Start state =3D start
    Input =3D 1; new possible states =3D ['start']
    Input =3D 0; new possible states =3D ['near', 'start']
    Input =3D 1; new possible states =3D ['end', 'start']
    Input =3D 1; new possible states =3D ['start']
    Input =3D 0; new possible states =3D ['near', 'start']
    Input =3D 1; new possible states =3D ['end', 'start']
  Stop state(s) =3D ['end', 'start']</b></pre>
<p>
Note that the <b>set</b> of states it might be in are printed as an alphabe=
tized
  <b>list</b>.
Also note especially that in the <b>start</b> state, if the input is a <b>0=
</b>,
  then the NDFA can either remain in the <b>start</b> state or go into the
  <b>near</b> state.
For this program, we keep track of all states that the NDFA <b>can</b> be i=
n,
  using a <b>set</b> of <b>new possible states</b>.
For the next input, <b>1</b>, we can be either in the <b>start</b> state
  (from the <b>start</b> state; an input of <b>1</b> allows us to stay in t=
he
  <b>start</b> state) or the <b>end</b> state (from the <b>near</b> state; =
an
  input of <b>1</b> allows us to transition to the <b>end</b> state).
Thus, we keep track of the <b>set</b> of states the NDFA can be in, and the
  new <b>set</b> of states the NDFA can be in after processing the next inp=
ut.
In this example, because <b>'end'</b> is included in the stop-states, this
  input does end in <b>01</b>.
</p><p>
For any state that does not have a transition specifying the current input,
  ignore that input for that state.
For example, if <b>near</b> is one of the possible states and <b>0</b> is t=
he
  input, ignore the <b>0</b> for the <b>near</b> state.
</p><p>
</p><h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>read_ndfa</b> has an open (file) parameter; it returns the dictionar=
y
     representing the non-deterministic finite automaton; <b>hint</b>: I us=
ed
     splicing and the <b>zip</b> function to build the inner dinctionaries,=
 and
     I called the <b>setdefault</b> function for the inner <b>dict</b>:
     alternatively I could have built it as <b>defaultdict</b>s from the
     standard  <b>collections</b> module
     (body is 9 lines).
<p>
</p></li><li><b>ndfa_as_str</b> has a dictionary parameter (representing th=
e FA); it
    returns a multi-line string (each line is ended by <b>'\n'</b>), which =
when
    printed shows the contents of the NDFA in the appropriate textual form:
    sorted alphabetically by state, with a state's transitions sorted by th=
eir
    input values, and sorted by states if an input results in multiple stat=
es
    (body is 4 lines; can you do it in 1?).
<p>
</p></li><li><b>process</b> has a dictionary parameter (representing the ND=
FA),
    a <b>str</b> parameter (representing the start-state), and a <b>list</b=
>
    parameter (representing a <b>list</b> of <b>str</b> inputs); it returns=
 a
    <b>list</b> that contains the start-state followed by <b>tuples</b> tha=
t
    show the input and resulting <b>set</b> of  states after each transitio=
n.
    For the example shown above, <b>process</b> returns the following
    <b>list</b>.
<p>
<b></b></p><pre><b>  ['start', ('1', {'start'}), ('0', {'near', 'start'}), =
('1', {'end', 'start'}), ('1', {'start'}),
    ('0', {'near', 'start'}), ('1', {'end', 'start'})]</b></pre>
    Finally, remember that if an input is illegal for the current state (is=
 not
      the key  in some transition for the current state), just ignore it.
    But if the input leads to no possible states (the empty set of states)
      terminate processing there
    (body is 12 lines).
<p>
</p></li><li><b>interpret</b> has a <b>list</b> parameter (the <b>list</b> =
result=20
    produced by <b>process</b>);  it returns a multi-line string (each line=
 is
    ended by <b>'\n'</b>), which when printed illustrates the results of
    processing an NDFA on an input in the appropriate textual form.
    Note that in this output the <b>sets</b> computed in <b>process</b> app=
ear
      as <b>lists</b> sorted alphabetically by state.
    See how it prints the example <b>list</b> argument shown above in the
       <b>Sample Interaction</b> below
    (body is 5 lines).
<p>   =20
</p></li><li>Write a script at the bottom of this module
    (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user to ent=
er the
    file describing the NDFA, prints it, prompts the user to enter the file
    containing lines of start-states and input, and simulates the NDFA on e=
ach=20
    line, printing  the results in the appropriate textual form
    (body is 7 lines).
</li></ul>
<p>

</p><h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should "match" this one.
<b><pre>  Specify the file name representing the Non-Deterministic Finite A=
utomaton: <i>ndfaendin01.txt</i>

  Specified details of this Non-Deterministic Finite Automaton=20
    end transitions: []
    near transitions: [('1', ['end'])]
    start transitions: [('0', ['near', 'start']), ('1', ['start'])]

  Specify the file name representing multiple start-states and their inputs=
: <i>ndfainputendin01.txt</i>

  Computed NDFA trace from its start-state
  Start state =3D start
    Input =3D 1; new possible states =3D ['start']
    Input =3D 0; new possible states =3D ['near', 'start']
    Input =3D 1; new possible states =3D ['end', 'start']
    Input =3D 1; new possible states =3D ['start']
    Input =3D 0; new possible states =3D ['near', 'start']
    Input =3D 1; new possible states =3D ['end', 'start']
  Stop state(s) =3D ['end', 'start']
 =20
  Computed NDFA trace from its start-state
  Start state =3D start
    Input =3D 1; new possible states =3D ['start']
    Input =3D 0; new possible states =3D ['near', 'start']
    Input =3D 1; new possible states =3D ['end', 'start']
    Input =3D 1; new possible states =3D ['start']
    Input =3D 0; new possible states =3D ['near', 'start']
    Input =3D 0; new possible states =3D ['near', 'start']
  Stop state(s) =3D ['near', 'start']</pre></b>
<p>
In Week #2 of this course we will cover EBNF and regular expressions, which
  relate to the files below.
You can run these files on your code to ensure they produce the correct res=
ults.
</p><p>
The <b>ndfatrain.txt</b> file is a non-deterministic finite automaton
  that determines whether or not a train (a sequence of characters represen=
ting
  different kinds of cars) is a legal train according to Chapter Exercise #=
7
  in the ENBF lecture.
Its input file is <b>ndfainputtrain.txt</b>, which starts with a legal trai=
n
  (one that ends with the state <b>done</b> as one possible state) followed=
 by
  an illegal train (one that does not end with the state <b>done</b> as one
  possible state).
</p><p>
The <b>ndfare.txt</b> file is a non-deterministic finite automaton translat=
ion
  of the regular expression <b>((a*|b)cd)+</b>.=20
Its input file is <b>ndfainputre.txt</b>, which starts with a match (one th=
at
  ends with the state <b>last</b> as one possible state) followed by a non-=
match
   (one that does not end with the state <b>last</b> as one possible state)=
.
</p></td>
</tr></tbody>
</table>
 =20


<!-- Problem #5 Google=20

<a name=3D"problem5">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width =3D"20%"><b>Problem #5: Google Queries</b></td>
<td width =3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that prompts the user to enter the
  name of a file of text that contains a sequence of Google queries;
  reads the file (storing it in two special <b>prefix</b> and <b>query</b>
    dictionaries);
  repeatedly: prints the dictionaries in a special form; prompts the user t=
o
    enter a query prefix, displays the top three queries with that prefix;
  prompts the user to enter a new full query, and then updates the dictiona=
ries
    as if this new full query had appeared at the end of the file initially
    read.
<p>
<h3>Background:</h3>
When we type a word (or a few words) into Google's query box, it shows some=
 of
  the most frequently entered queries starting with those word(s).
For example, when I recently typed the word <b>uci</b> into Google, it show=
ed
  the following as the 3 most frequent queries starting with <b>uci</b>:
<ul>
<li><b>uci law</b>
<li><b>uci medical center</b>
<li><b>uci women's soccer</b>
</ul>
I could have clicked on one of these queries to select it, or continued typ=
ing
  more words to specify my own (different) query.
<p>
Here we say <b>uci</b> is a <b>prefix</b>, which is the beginning of some
  <b>full query</b>, like <b>uci medical center</b>.
<p>
Google represents a <b>full query</b> as a <b>tuple</b> of <b>str</b> (word=
s).
For example, <b>('uci', 'medical', 'center')</b> is a <b>full query</b>.
Google also represents a <b>prefix</b> as a <b>tuple</b> of <b>str</b> (wor=
ds).
For example, <b>('uci',)</b> is a one-word <b>prefix</b> and
  <b>('uci', 'medical')</b> is a two-word <b>prefix</b> of this
  <b>full query</b>.
<p>
From any <b>full query</b> we can compute a <b>set</b> of all its
  <b>prefix</b>es.
For example, the <b>full query</b> <b>('uci', 'medical', 'center')</b> woul=
d
  compute the <b>prefix set</b>
  <b>{('uci',), ('uci', 'medical'), ('uci', 'medical', 'center')}</b>.
The <b>prefix set</b> includes a <b>tuple</b> of the first word,=20
  a <b>tuple</b> of the first two words, ...
  and finally a <b>tuple</b> of all the words in the <b>full query</b>.
<p>
Google stores information (in dictionaries) that allows it to predict the m=
ost
  likely <b>full query</b> from any <b>prefix</b> the user enters in the
  Google search box (as discussed in the example above).
The prediction is based on (1) knowing all the <b>full queries</b> for a
  <b>prefix</b> and (2) knowing how many times each <b>full query</b> was
  used.
Using this information, Google can show the user the most frequently
  entered <b>full queries</b> for the <b>prefix</b> he/she typed.
<p>
Google stores two dictionaries to accomplish this task.
Recall that dictionary keys and <b>set</b> values must be immutable types:
  <b>tuple</b>s are immutable (as are strings and integers) but not
  <b>list</b>s.
<ol>
<li>Google stores a <b>prefix</b> dictionary whose <b>key</b> is a
  <b>prefix</b> (a <b>tuple</b>) and whose <b>associated value</b> is a
  <b>set</b> of all the <b>full queries</b> that have been entered for that
  <b>prefix</b>.
<p>
<li>Google stores a <b>query</b> dictionary whose <b>key</b> is a
  <b>full query</b> (again a <b>tuple</b>) and whose <b>associated value</b=
>
  is an <b>int</b>: the number of times (the frequency) that that=20
  <b>full query</b> was used.
</ol>
<b>IMPORTANT:</b>
Use a <b>defaultdict</b> to store both of these dictionaries.
<p>
In this program you will build these dictionaries and then use them it to
  predict a <b>full query</b> from a <b>prefix</b> entered by the user, and
  update the dictionaries for any new query.
<p>
<h3>Input and Output:</h3>
After prompting the user for the file of full queries, read the file, build=
ing
  the <b>prefix</b> and <b>query</b> dictionaries (we are dropping the word
  <b>full</b> now).
<p>
For a simple example, the file <b>googleq0.txt</b> contains the following
  lines (in it, for simplicity and conciseness, we abbreviated
  b =3D basketball, c =3D center, l =3D law, m =3D medical, s =3D soccer,  =
u =3D uci, and
  w =3D women's).
<b><pre>  u m c
  u l
  u w s
  u l
  u w s
  u w b
  u w b
  u w b</pre></b>
<p>
The program will first read this file and build the appropriate <b>prefix</=
b>
  and <b>query</b> dictionaries; then it will print each dictionary.
The <b>prefix</b> dictionary should be sorted by keys, from the shortest to
  longest prefix, with equal-length prefixes sorted in standard lexical ord=
er;
  of course the associated sets may print their values in any order.
The <b>query</b> dictionary should be sorted by associated values (integers=
),
  from largest to smallest integer, with equal integers sorted by their key=
s in
  standard lexical order.
<p>
For example, the file above would produce the following output:
<b><pre>  Prefix dictionary:
    ('u',) -> {('u', 'm', 'c'), ('u', 'l'), ('u', 'w', 'b'), ('u', 'w', 's'=
)}
    ('u', 'l') -> {('u', 'l')}
    ('u', 'm') -> {('u', 'm', 'c')}
    ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
    ('u', 'm', 'c') -> {('u', 'm', 'c')}
    ('u', 'w', 'b') -> {('u', 'w', 'b')}
    ('u', 'w', 's') -> {('u', 'w', 's')}

  Query dictionary:
    ('u', 'w', 'b') -> 3
    ('u', 'l') -> 2
    ('u', 'w', 's') -> 2
    ('u', 'm', 'c') -> 1</pre></b>
<p>
In the <b>prefix</b> dictionary <b>('u',)</b> appears before <b>('u', 'l')<=
/b>
  because it has fewer words; and <b>('u', 'l')</b> appears before
  <b>('u', 'w')</b> because in standard lexical order, when 2-tuples have e=
qual
  first values, they are ordered by their second values, and <b>'l'</b> com=
es
  before <b>'w'</b>.
<p>
In the <b>query</b> dictionary <b>('u', 'w', 'b')</b> appears before
  <b>('u', 'l')</b> because the first tuple's associated value (<b>3</b>) i=
s
  bigger than the second tuple's (<b>2</b>); and <b>('u', 'l')</b> appears
  before <b>('u', 'w', 's')</b> because when tuples are associated with equ=
al
  values (<b>2</b>), they are ordered lexically, and <b>('u', 'l', ...)</b>
  comes before  <b>('u', 'w', ...)</b> (see the reasoning above).
<p>
Now, repeatedly prompt the user for any query prefix and print the top thre=
e
  full queries for the entered prefix: print them in order from most to lea=
st
  frequent full query (with ties printed using the standard lexical orderin=
g;
  the same ordering used when printing the Query dictionary above).
Using the dictionaries above the iteraction would be.
<p>
<pre><b>  Pick the prefix sequence (or enter done): u
    Top (up to 3) matching full queries in order =3D [('u', 'w', 'b'), ('u'=
, 'l'), ('u', 'w', 's')]</b></pre>
Finally, prompt the user to enter the full query, and update the dictionari=
es
  and reprint them.
<pre><b>  Pick the full query sequence (or enter done): u w s

  Prefix dictionary:
    ('u',) -> {('u', 'm', 'c'), ('u', 'w', 'b'), ('u', 'l'), ('u', 'w', 's'=
)}
    ('u', 'l') -> {('u', 'l')}
    ('u', 'm') -> {('u', 'm', 'c')}
    ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
    ('u', 'm', 'c') -> {('u', 'm', 'c')}
    ('u', 'w', 'b') -> {('u', 'w', 'b')}
    ('u', 'w', 's') -> {('u', 'w', 's')}

  Query dictionary:
    ('u', 'w', 'b') -> 3
    ('u', 'w', 's') -> 3
    ('u', 'l') -> 2
    ('u', 'm', 'c') -> 1</b></pre>
Here, the prefix dictionary stays the same (the full query already was ente=
red
  once; we could have entered a new full query, which would augment the pre=
fix
  dictionary), and the full query <b>('u', 'w', 's')</b> has its query-coun=
t
  increased from <b>2</b> to <b>3</b>.
<p>

<h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>all_prefixes</b> has a <b>tuple</b> of <b>str</b>
         (words) parameter; it returns a <b>set</b> of <b>tuple</b> of
          <b>str</b>: all the <b>prefixes</b> of the <b>full query</b> argu=
ment.
       For example, <b>all_prefixes(('a', 'b', 'c'))</b> returns
         <b>{('a',), ('a', 'b'), ('a', 'b', 'c')}</b>.
       <b>Hints:</b> comprehension and slicing
       (body is 1 line).
<p>
<li><b>add_query</b> has a prefix dictionary, query dictionary, and new ful=
l
         query (<b>tuple</b> of <b>str</b>) as parameters; it returns
         <b>None</b> but updates these two dictionaries based on the new fu=
ll
         query.
       It adds the new full query's prefixes to the prefix dictionary (each
          associated with the new full query) and increments the integer va=
lue
          associated with that full query in the query dictionary (or, if t=
he
          full query is not in the dictionary, associates that full query w=
ith
          1) (body is 3 lines).
<p>
<li><b>read_queries</b> has an open (file) parameter; it returns a 2-tuple
     containing the prefix and query dictionaries (in that order) built by
     reading and processing each full query in this file.
    (body is 5 lines).
<p>
<li><b>dict_as_str</b> has a dictionary, key <b>function</b>
      (default <b>None</b>) and <b>bool</b> (default <b>False</b>) as
       parameters; it returns a multi-line string (each line is ended by
       <b>'\n'</b>), which when printed shows the contents of the dictionar=
y in
       the appropriate textual form.
    The key function determines the ordering and the <b>bool</b> determines
      whether to reverse it: like the <b>key</b> and <b>reverse</b> paramet=
ers
      used for the <b>sort</b>/<b>sorted</b> functions in Python.
    This function is used to print both the prefix and query dictionaries.
    <p>
    <b>Important:</b> The key function (and its use when iterating over the
      dictionary in <b>dict_as_str</b>) must assume that its argument is a
      <b>key</b> in the dictionary, not an <b>item</b>;
      otherwise the batch self-check test will fail even if your code works=
.
     (body is 4 lines; can you do it in 1?).
<p>
<li><b>top_n</b> has a prefix (<b>tuple</b> of <b>str</b>), <b>int</b>, pre=
fix
        dictionary, and query dictionary as parameters; it returns a <b>lis=
t</b>
        of full queries (<b>tuple</b> of <b>str</b>) whose length is the
        integer parameter, containing the most frequent full queries with t=
hat
         prefix; if the number of full queries with that prefix is less tha=
n
         that integer parameter, return all the full queries.
    If no full queries have this prefix, return the empty list.
    Notes: The dictionaries should not be changed.
           If multiple full queries occur the same number of times, prefer
      the full queries that come earlier in the standard lexical ordering: =
e.g.,
      the same order they are printed in the query dictionary.
      (body is 3 lines; can you do it in 1?).
<p>    =20
<li>Write a script at the bottom of this module
    (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user to ent=
er the
    file storing the queries and builds the prefix and query dictionaries f=
rom
    this file; then repeated: print these dictionaries; prompt the user to =
enter
    a prefix; display the top three full queries with that prefix; prompt t=
he
    user to enter a full query; and finally update the prefix and query
    dictionaries with that full query
   (13 lines).
</ul>
<h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should match the form of this one (the order of values in the s=
ets
  may vary).
<pre><b>Pick the file name containing the full query: <i>googleq0.txt</i>

Prefix dictionary:
  ('u',) -> {('u', 'l'), ('u', 'w', 'b'), ('u', 'w', 's'), ('u', 'm', 'c')}
  ('u', 'l') -> {('u', 'l')}
  ('u', 'm') -> {('u', 'm', 'c')}
  ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
  ('u', 'm', 'c') -> {('u', 'm', 'c')}
  ('u', 'w', 'b') -> {('u', 'w', 'b')}
  ('u', 'w', 's') -> {('u', 'w', 's')}

Query dictionary:
  ('u', 'w', 'b') -> 3
  ('u', 'l') -> 2
  ('u', 'w', 's') -> 2
  ('u', 'm', 'c') -> 1

Pick the prefix sequence (or enter done): <i>u</i>
  Top (up to 3) matching full queries in order =3D [('u', 'w', 'b'), ('u', =
'l'), ('u', 'w', 's')]

Pick the full query sequence (or enter done): <i>u w s</i>

Prefix dictionary:
  ('u',) -> {('u', 'l'), ('u', 'w', 'b'), ('u', 'w', 's'), ('u', 'm', 'c')}
  ('u', 'l') -> {('u', 'l')}
  ('u', 'm') -> {('u', 'm', 'c')}
  ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
  ('u', 'm', 'c') -> {('u', 'm', 'c')}
  ('u', 'w', 'b') -> {('u', 'w', 'b')}
  ('u', 'w', 's') -> {('u', 'w', 's')}

Query dictionary:
  ('u', 'w', 'b') -> 3
  ('u', 'w', 's') -> 3
  ('u', 'l') -> 2
  ('u', 'm', 'c') -> 1

Pick the prefix sequence (or enter done): <i>u w</i>
  Top (up to 3) matching full queries in order =3D [('u', 'w', 'b'), ('u', =
'w', 's')]

Pick the full query sequence (or enter done): <i>a b c</i>

Prefix dictionary:
  ('a',) -> {('a', 'b', 'c')}
  ('u',) -> {('u', 'l'), ('u', 'w', 'b'), ('u', 'w', 's'), ('u', 'm', 'c')}
  ('a', 'b') -> {('a', 'b', 'c')}
  ('u', 'l') -> {('u', 'l')}
  ('u', 'm') -> {('u', 'm', 'c')}
  ('u', 'w') -> {('u', 'w', 'b'), ('u', 'w', 's')}
  ('a', 'b', 'c') -> {('a', 'b', 'c')}
  ('u', 'm', 'c') -> {('u', 'm', 'c')}
  ('u', 'w', 'b') -> {('u', 'w', 'b')}
  ('u', 'w', 's') -> {('u', 'w', 's')}

Query dictionary:
  ('u', 'w', 'b') -> 3
  ('u', 'w', 's') -> 3
  ('u', 'l') -> 2
  ('a', 'b', 'c') -> 1
  ('u', 'm', 'c') -> 1

Pick the prefix sequence (or enter done): <i>done</i></b></pre>
<p>
You can also try processing the <b>googleq1.txt</b> and <b>googleq2.txt</b>
  files
</td>
</tbody>
</table>
-->

<!-- Problem #5 Word Generator -->

</a><a name=3D"problem5">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width=3D"20%"><b>Problem #5: Word Generator</b></td>
<td width=3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that prompts the user to enter the
    <b>order statistic</b> (a positive number) and the name of a file of te=
xt;
  reads the file of text (storing it in a special <b>corpus</b> dictionary)=
;
  prints the dictionary in a special form;
  prompts the user to enter the <b>order statistic</b> number of words, and=
 the
    number of words to generate, then print a <b>list</b> of that many word=
s
    randomly generated from the corpus.

Your program will "learn" the word pattern of an author (based on some
  "order statistic" and reading a large sample of the author's writing) and
  then generate random text following the author's word patterns.
<p>
</p><h3>Input and Output:</h3>
After prompting for the <b>order statistic</b>, read a file of words, build=
ing a
  corpus dictionary storing data annotated as <b>{(str):[str]}</b>.
Here the dictionary's keys are <b>tuple</b>s of <b>n</b> words (where <b>n<=
/b>
  is the <b>order statistic</b>) and each key's assocaited value is a
  <b>list</b> of all the words in the text that somewhere follow these word=
s:
  e.g., if <b>n</b> were <b>2</b>, the dictionary would contain a key for e=
very
  pair of words appearing next to each other in the text, and each would ha=
ve
  an associated value that is a <b>list</b> of all the words following thes=
e two
  (no matter where the pair occurs, with NO DUPLICATES allowed in the value=
s
  <b>list</b>).
<p>
An easy way to read the words one at a time is to use the result returned b=
y
  the helper function <b>word_at_a_time</b> (which I have supplied at the t=
op of
   <b>wordgenerator.py</b>).=20
When passed an <b>open</b> file to read from, this function returns an obje=
ct
  on which we can (a) call <b>next</b> and/or (b) iterate over, using a <b>=
for</b> loop.
For example, if a file named <b>f.txt</b> contained
<b></b></p><pre><b>  a b c
  d e</b></pre>
then executing the code
<b><pre>  i =3D word_at_a_time(open('f.txt'))
  print(next(i), next(i))  # print next (really first) two values in the fi=
le
  for c in i:              # iterate over all remaining values in the file
      print(c)             #   and print them</pre></b>
would print
<b><pre>  a b
  c
  d
  e</pre></b>
<p>
We will learn when we examine iterators in depth that the <b>for</b> loop
  implicitly calls <b>next</b> on the object (here <b>i</b>) that it is
  iterating over.
For now, use this approach to read some number of words (based on the
  <b>order statistic</b>), followed by reading all the other words.
</p><p>
We can build the dictionary by "prereading" <b>n</b> words (by calling
  <b>next</b> explicitly) into a <b>list</b> (assume that this is always
  possible;
  how might it not be?); then repeatedly read the next word and put it in a=
s a
  value associated with the <b>list</b> of pre-read words; then, drop the
  "oldest" word at the beginning of the <b>list</b>, and add this next word
  as the "youngest" at the end of the <b>list</b> (always keeping the list
  length at <b>n</b>); repeating this process until all the words have been
  read.
Remember to convert this <b>list</b> of words to a <b>tuple</b> of words,
  before using it as a key in the dictionary.
</p><p>
For a simple example, the file <b>wginput1.txt</b> contains the following
  lines (it could have all this information on one line or more lines):
<b></b></p><pre><b>  a b c b a d c b a d
  c a a b a a d</b></pre>
 =20
<p>
Print all the associations in the corpus dictionary, one per line in standa=
rd
  lexical order; after printing all associations, print the length of the
  smallest and largest <b>list</b> that is a value in the dictionary.
Each line contains an <b>n</b> word <b>tuple</b>, followed by the <b>list</=
b>
   of unique words (no duplicates) that follow them anywhere in the text.
In standard lexical order, the keys appear in order relative to the first w=
ord=20
  in the <b>tuple</b>; for all first words that are the same, they appear i=
n
  order relative to the second word in the <b>tuple</b>; for all first and
  second words that are the same, they appear in order relative to the thri=
d
  word in the <b>tuple</b>; etc. (see the example below).
</p><p>
For example, the file above would produce:
<b></b></p><pre><b>  Corpus
    ('a', 'a') can be followed by any of ['b', 'd']
    ('a', 'b') can be followed by any of ['c', 'a']
    ('a', 'd') can be followed by any of ['c']
    ('b', 'a') can be followed by any of ['d', 'a']
    ('b', 'c') can be followed by any of ['b']
    ('c', 'a') can be followed by any of ['a']
    ('c', 'b') can be followed by any of ['a']
    ('d', 'c') can be followed by any of ['b', 'a']
  min/max list lengths =3D 1/2</b></pre>
<p>
For example, <b>('a','d')</b> appears three times in the text above, twice
  followed by <b>'c'</b> and once followed by nothing (at the end of the fi=
le);
  <b>('a','b')</b> appears twice in the file above, first followed by
  <b>'c'</b> and second followed by <b>'a'</b>.
</p><p>

Prompt the user for the words to start with (there are <b>order statistic</=
b>
  number of them) and the number of random words after that to generate.
Produce such a <b>list</b> of words and print it.=20
</p><p>
A random 10 word <b>list</b>, after the words <b>a</b> and <b>d</b> might
  print as
</p><pre><b>    Random text =3D ['a', 'd', 'c', 'a', 'a', 'd', 'c', 'a', 'a=
', 'd', 'c', 'b']</b></pre>
In the result we start with <b>a d</b> (2 words specified by the user), we
  know only <b>c</b> can come next; then using <b>d c</b> we know that
  either <b>b</b> or <b>a</b> must come next; it randomly chooses <b>a</b>.=
..
<p>

</p><h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>read_corpus</b> has an <b>order statistic</b> (<b>int</b>) parameter=
 and
     and open (file) parameter; it returns the dictionary representing the
     corpus of words in a file
    (body is 8 lines).
<p>
</p></li><li><b>corpus_as_str</b> has a dictionary parameter (representing =
the corpus);
     it returns a multi-line string (each line is ended by <b>'\n'</b>), wh=
ich
     when printed shows the contents of the corpus followed by the min/max
     <b>list</b> lengths in the appropriate textual form
     (body is 7 lines; can you do it in 4?).
<p>
</p></li><li><b>produce_text</b> has a dictionary parameter (representing t=
he corpus),
    a <b>list</b> parameter (representing the starting words), and an <b>in=
t</b>
    parameter (representing the number of additional words to generate);
    it returns a <b>list</b> that contains the the starting words followed =
by
    the generated words.
    <p>
    <b>Hints</b>: Let <b>n</b> be the <b>order statistic</b> of the diction=
ary.
    Construct two <b>lists</b> (<b>[str]</b>), each initially storing these=
 same
      <b>n</b> starting words.
    The first will always contain only the most recent <b>n</b> words (to b=
e
      coverted to a <b>tuple</b> and used as a key in the dictionary); the=
=20
      second will  grow to contain all the generated words.
    Generate a random next word from the dictionary by using the <b>choice<=
/b>
      function in the <b>random</b> module: e.g., <b>choice(['a','b','c'])<=
/b>
      will return a random value in the <b>list</b>, either <b>'a'</b>,
      <b>'b'</b>, or <b>'c'</b>); add it to both <b>lists</b>; then, drop t=
he
      first word from the first <b>list</b>, so it remains a <b>list</b> of
      length <b>n</b>; repeat until you have generated the required number =
of
      words.
    </p><p>
    <b>Warning</b>: you might have to stop prematurely if you generate the =
last
      <b>n</b> words in the text, and if these words occur nowhere else.
    That is because in this case, there is no random word to generate follo=
wing
      them; in this case append a <b>None</b> to the end of the list of wor=
ds
      and  immediately return that list.
    </p><p>
    A slightly more elegant solution in Python uses only one list, copying =
the
      last <b>order statistic</b> values of it into a tuple when needed for=
 a
      key to the dictionary.
    Ensure that you do not mutate any of the parameters
      (body is 8 lines).
</p><p>    =20
</p></li><li>Write a script at the bottom of this module
    (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user for (a=
) the
    <b>order statistic</b> (rejecting non-positive values), (b) the file st=
oring
    the text, (c) <b>order statistic</b> words from the text, and (d) the
    number of random words to generate (reject any negative values); it
    calls these functions to solve the problem, and print the appropriate
    information
   (7 lines).
</li></ul>
<h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should match the form of this one (the actual random text my va=
ry).
<pre><b>  Specify the order statistic: <i>2</i>
  Specify the file name representing the text to process: <i>wginput1.txt</=
i>
  Corpus
    ('a', 'a') can be followed by any of ['b', 'd']
    ('a', 'b') can be followed by any of ['c', 'a']
    ('a', 'd') can be followed by any of ['c']
    ('b', 'a') can be followed by any of ['d', 'a']
    ('b', 'c') can be followed by any of ['b']
    ('c', 'a') can be followed by any of ['a']
    ('c', 'b') can be followed by any of ['a']
    ('d', 'c') can be followed by any of ['b', 'a']
  min/max list lengths =3D 1/2
 =20
  Specify 2 words starting the list
  Specify word 1: <i>a</i>
  Specify word 2: <i>d</i>
  Specify # of words to append at the end of the started list: <i>10</i>
  Random text =3D ['a', 'd', 'c', 'a', 'a', 'd', 'c', 'a', 'a', 'd', 'c', '=
b']</b></pre>
<p>
You can also try reading a much larger file included in this project
  folder <b>war_and_peace.txt</b>, Leo Tolstoy's, "War and Peace".
I tried it with an order statistic of 3.
The corpus has over 432,000 entries; the biggest key triple had an
  associated value with 120 unique words in it.
It tooks a few second to produce the result.
The key was <b>('one', 'of', 'the')</b> and its associated value was the li=
st
</p><pre><b>  ['best', 'genuine', 'next', 'fainting', 'buttons', 'footmen',
   'inner', 'tubs', 'doors', 'princesses', 'wines', 'ladies', 'doorways',
   'priests', 'columns', 'servants', 'associations', 'sweetest', 'largest',
   'great', 'infantry', 'most', 'battalion', 'officers', 'bolder', 'post',
   'ordinary', 'second', 'pleasantest', 'soft', 'lodges', 'warmest', 'longe=
st',
   'hussars', 'apsheron', 'soldiers', 'lines', 'innumerable', 'drivers',=20
   'hindmost', 'foremost', 'boulevards', 'principal', 'maids', 'happiest',
   'first', 'balls', 'players', 'brothers', 'brethren', 'eight', 'nursemaid=
s',
   'hospital', 'frenchmen', 'masonic', 'committees', 'richest', 'greatest',
   'mahogany', 'front', 'merry', 'figures', 'mad', 'conditions', 'borzoi',
   'men', 'strange', 'rostovs', 'looking', 'stupidest', 'young', 'women',
   'veterans', 'bridges', 'swaying', 'aides', 'polish', 'chief', 'millions'=
,
   'generals', 'rooms', 'senators', 'old', 'prince', 'coachmen', 'visitors'=
,
   'educational', 'peasants', 'wealthiest', 'estates', 'carts', 'wounded',
   'head', 'doctors', 'orders', 'staff', 'least', 'tents', 'german', 'highe=
st',
   'disinterested', 'shutters', 'passages', 'smiths', 'russians', 'gentleme=
n',
   'fancies', 'glasses', 'moscow', 'provincial', 'superior', 'few', 'combat=
ants',
   'irregulars', 'french', 'big', 'marshals', 'three', 'plans', 'opinions']=
</b></pre>
<p>
With the appropriate modification, we can use this same program to
  read/generate music or DNA sequences or any other data made from an
  sequence of symbols.
</p></td>
</tr></tbody>
</table>

<!-- Problem #5 Synonym Finder=20

<a name=3D"problem5">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width =3D"20%"><b>Problem #5: Synonym Finder</b></td>
<td width =3D"80%">
<h3>Problem Summary:</h3>
Write the required functions and script that prompts the user to enter the
  the names of any number of text files; reads these text files (creating o=
ne
  special <b>semantic</b> dictionary); optionally prints the dictionary in =
a
  special form; prompts the user to enter the name of a file containing a
  series of synonym problems (given a word, which of a series of words is i=
ts
  best synonym); then uses the <b>semantic</b> dictionary to try to solve e=
ach
  synonym problem, printing the results of each problem in a special form, =
and
  finally printing the percentage of problems that it solved correctly.
<p>
The program will read the text file(s) to <b>learn</b> which words are simi=
lar
  to which others: each word in the <b>semantic</b> dictionary is associate=
d
  with a <b>context</b> dictionary storing the words that appear in the sam=
e
  sentences (and how often they appear in the same sentences).
The program will use a <b>metric</b> function to determine how similar any =
two
  words are by comparing their <b>context</b> dictionaries.
By this process, the program can determine whether two words are likely to =
be
  synonyms.
<p>
<h3>Input and Output:</h3>
After repeatedly prompting for the text file names (ensuring each one can b=
e
  read: try to <b>open</b> it), read each file, a sentence at a time, build=
ing
  a <b>semantic</b> dictionary of the form <b>{str:{str:int}}</b>.
The outer keys of this dictionary are all the words in the text files; each
  word is associated with an inner <b>context</b> dictionary whose keys are=
 all
  the words that appear in sentences with the outer word; each inner key is
  associated with the number of times it appears in sentences with the oute=
r
  key.
All words in the sentences should be converted to lower-case letters and al=
l
  punctuation should be removed; certain common function words should also =
be
  removed as "noise words".
<p>
An easy way to read the files, one sentence at a time, is to iterate over t=
he
  result returned by calling the helper function <b>sentence_at_a_time</b>
 (which I have supplied at the top of <b>synonym.py</b>).=20
When passed an <b>open</b> file to read from and a <b>set</b> of words to
  ignore, this function returns an object that we can iterate over -one
  sentence at a time- using a <b>for</b> loop.
For example, if a file named <b>trivial.txt</b> contained the text
<b><pre>  I went to the gym this
  morning. Later in the
  morning I rested; I was tired!</pre></b>
then executing the code
<b><pre>  for s in sentence_at_a_time(open('f.txt'), {'in','the','to'}):
      print(s)</pre></b>
would print
<b><pre>  ['i', 'went', 'gym', 'this', 'morning']
  ['later', 'morning', 'i', 'rested']
  ['i', 'was', 'tired']</pre></b>
<p>
Note that <b>sentence_at_a_time</b> will correctly return full sentences
  (each as a <b>list</b> of words), whether they appear on one or multiple
  lines.
For now, just assume that this function works correctly (you can certainly
  experiment with it on small text files); later in the quarter we will
  be able to understand its body: when we learn about regular expressions
  (in week 2) and implementing iterators with generator functions (in week =
4).
<p>
Print all the associations in the semantic dictionary, one per line in stan=
dard
  lexical order (with the inner dictionaries also printed in standard lexic=
al
  order); after printing all associations, print the length of the smallest=
 and
  largest inner dictionaries, using the following form.
<p>
For example, the file <b>trivial.txt</b> shown above (also using the file
  <b>ignore_trivial.txt</b>, which contains the words <b>in</b>, <b>the</b>=
,
  and <b>to</b>) would print as:
<b><pre>  Semantic Dictionary
    context for gym =3D i@1, morning@1, this@1, went@1
    context for i =3D gym@1, later@1, morning@2, rested@1, this@1, tired@1,=
 was@1, went@1
    context for later =3D i@1, morning@1, rested@1
    context for morning =3D gym@1, i@2, later@1, rested@1, this@1, went@1
    context for rested =3D i@1, later@1, morning@1
    context for this =3D gym@1, i@1, morning@1, went@1
    context for tired =3D i@1, was@1
    context for was =3D i@1, tired@1
    context for went =3D gym@1, i@1, morning@1, this@1
    min/max context lengths =3D 2/8</pre></b>
<p>
Most of the words in these sentences are unique, but the words <b>i</b>
  and <b>morning</b> appeared in two sentences, so they have the largest
  inner dictionaries: <b>morning</b> appears in <b>2</b> sentences with
  <b>i</b>, so <b>i</b> also appears in <b>2</b> sentences with <b>morning<=
/b>.
Also note that the context for any word will not contain that same word.
<p>
Read a file that contains a series of synonym problems (one per line) with =
each
  line in the following form:
<ul>
<li>A word
<li>Any number of other words separated by spaces: the choices for its poss=
ible synonyms
<li>The correct choice of the synonym
</ul>
<p>
For example, one line in this kind of input file might look like
<b><pre>  draw walk eat paint paint</pre></b>
indicating the problem is to find the synonym of <b>draw</b> from the choic=
es
  <b>walk</b>, <b>eat</b>, and <b>paint</b>, where the correct answer is
  <b>paint</b>.
<p>
For each line in the file of synonym problems, it will print that (a) it fo=
und
  the correct synonym; (b) it failed to find the correct synonym, because i=
t
  chose incorrectly; or (c) it failed to find the correct synonym because t=
he
  <b>metric</b> function raised an exception on one of the possible synonym=
s.
In these cases it will display a message like one of the following (note th=
at
  here the strings appear in quotes; Hint: the <b>repr</b> function):
<b><pre>
  Correct: 'picture' is most like 'painting' from ['painting', 'chair']
  Incorrect: 'duty' is most like 'task', not 'example' from ['task', 'examp=
le']
  Metric failure: could not choose synonym for 'earnest' from ['serious', '=
amusing']</pre></b>


<h3>Functions and Script:</h3>
Write the following functions and script.
I am providing line counts for these function bodies not as requirements, b=
ut
  to indicate the lengths of well-written Pythonic code.
<ul>
<li><b>build_semantic_dictionary</b> has a <b>list</b> of <b>open</b> files
      parameter (the training file(s)), and an <b>open</b> file parameter
     (words to ignore file); it returns a <b>semantic</b> dictionary
     (<b>{str:{str:int}}</b>), in which each unignored word is associated w=
ith
     a <b>context</b> dictionary whose keys are all the unignored words tha=
t
     appear in the same sentences with it, and whose associated value is th=
e
     number of times each key appears in the same sentences as the word: in=
 the
     sentence <b>I really really like you.</b>, the <b>context</b> dictiona=
ry
     for each word in this sentence will count  <b>really</b> twice.
     Hints: Process each training file by reading it (using
        <b>sentence_at_a_time</b>, which is passed a <b>set</b> of all
        the words to be ignored: remember to <b>rstrip</b> them when readin=
g
        the file); process each word in a sentence by incrementing the coun=
t in
         its <b>context</b> dictionary of every other word in the sentence.
     Recall that a word that is a key in the <b>semantic</b> dictionary sho=
uld
       not be a key in its own <b>context</b> dictionary
    (body is 9 lines containing four nested loops).
<p>
<li><b>dict_as_str</b> has a dictionary parameter (representing the
     <b>semantic</b> dictionary); it returns a multi-line string (each line=
 is
     ended by <b>'\n'</b>), which when printed shows the contents of the=20
     <b>semantic</b> dictionary followed by the max/min <b>context</b>
     dictionary lengths in the appropriate textual form shown above
     (body is 5 lines).
<p>
<li><b>cosine_metric</b> has two <b>context</b> dictionaries as parameters;=
 it
  returns a <b>float</b> indicating how close are the context dictionaries
  (a higher number is better).
  Here is the formula for computing the <b>cosine_metric</b>
  <p>
  <img src=3D"images/cosine_metric.jpg"></img>
  <p>
  The formula will always have a value between <b>0</b> and <b>1</b>.
  Note that if either <b>context</b> dictionary is empty, the denominator w=
ill
    be <b>0</b> and Python will raise a <b>ZeroDivisionError</b> exception
  <p>
  For example, if <b>cd<sub>1</sub> =3D {'a':1, 'b':2, 'c':3}</b> and=20
  <b>cd<sub>2</sub> =3D {'a':5, 'c':7, 'd':8}</b> then we would calculate t=
he
  <b>cosine_metric</b> as.
  <p>
  <img src=3D"images/cosine_metric_calculation.jpg"></img>
  <p>
  Hint: recall the <b>get</b> function on dictionaries can supply a default
    value to return if the key is not in the dictionary.
  <p>
<p>
<li><b>most similar</b> has a <b>str</b> parameter (the target word, to fin=
d the
  synonym of), a <b>list</b> of <b>str</b> parameter (the synonym candidate=
s), a
  <b>semantic</b> dictionary parameter (of the <b>context</b> dictionaries =
for
  words), and a metric function parameter (of which <b>cosine_metric</b> is=
 one
  example); it returns the synonym candidate whose metric is largest when
  compared with the target word.
This function can raise an exception if any word has no associated
  <b>context</b> dictionary in the <b>semantic</b> dictionary.
<p>
<li><b>similarity_test</b> has an open file parameter (the file of synonym
  problems), a <b>semantic</b> dictionary parameter, and a metric function
  parameter; it returns a descriptive <b>str</b> showing the results of all=
 its
  attempts to solve synonym problems (whose last line is the percentage of
  problems it solved correctly).
See the three types of results illustrated in the section above
  (body is 16 lines).
<p>    =20
<li>Write a script at the bottom of this module
    (in <b>if __name__ =3D=3D '__main__':</b>) that prompts the user for (a=
) the
    names of the training files (the default answer should be <b>no-more</b=
>;
    and unopenable files should be rejected) then builds the <b>semantic</b=
>
    dictionary from these files (passing the opened <b>ignore_words.txt</b>
    file as the second argument), (b) whether to print the <b>semantic</b>
    dictionary, (c) the name of the synonym problem file (rejecting any
    unopenable file - here use <b>goody.safe_open</b>) then attempts to sol=
ve
    all these problems and prints all the results.
</ul>
<h3>Sample Interaction:</h3>
The program, as specified, will have the following interaction:
  user-typed information appears in <i>italics</i>.
Your output should match the form of this one (the actual random text my va=
ry).
<pre><b>  Enter name of text file for training (no-more to start processing=
)[no-more]: <i>bible.txt</i>
  Enter name of text file for training (no-more to start processing)[no-mor=
e]: archie_comics.txt
    file named archie_comics.txt rejected: cannot be opened
  Enter name of text file for training (no-more to start processing)[no-mor=
e]: <i>war_and_peace.txt</i>
  Enter name of text file for training (no-more to start processing)[no-mor=
e]:=20

  Print Semantic dictionary?[False]:=20

  Enter name of problem file[synonym_problems.txt]: <i>simple_problems.txt<=
/i>
    Correct: 'earnest' is most like 'serious' from ['serious', 'amusing']
    Incorrect: 'picture' is most like 'painting', not 'table' from ['house'=
, 'painting', 'table', 'chair']
    Incorrect: 'vexed' is most like 'annoyed', not 'amused' from ['amused',=
 'annoyed']
    Correct: 'watch' is most like 'see' from ['hear', 'see', 'smell']
    Metric failure: could not choose synonym for 'thief' from ['banker', 'r=
obber', 'postman']
 40.0% correct</pre></b>
<h3>Debugging Help:</h3>
This problem requires reading some huge files and building huge data
  structures.
It takes my code on my machine about 10 seconds to perform all the bsc test=
s.
The biggest time/debugging issues relate to the <b>build_semantic_dictionar=
y</b>
  function
<p>
Testing the <b>build_semantic_dictionary</b> function:
There are 3 separate tests of this function: lines 9-10 (trivial), 11-12
  (simple but still large ~ 200 words: see the <b>simple12_dict_as_str.txt<=
/b>),
  and 13-14 (huge: forget about trying to examine it, which reads all the
  words in the "Bible" and "War and Peace").
<p>
If you fail the test on line 14, your console becomes garbage and it looks =
like
  you code is in an infinite loop (not terminated).
This is because it is printing two huge lines that will be of no use to you
  when debugging anyway.
The best thing to do for such an error is to terminate the code (red square=
)
  and clear the console (gray X).
<p>
<ol>
<li>Comment out lines 11-14 in <b>bsc5.txt</b>, so you can test only the
  trivial example.=20
Its result should be the following dictionary
<b><pre>
{'i':       {'went': 1, 'gym': 1, 'this': 1, 'morning': 2, 'later': 1, 'res=
ted': 1, 'was': 1, 'tired': 1},
 'went':    {'i': 1, 'gym': 1, 'this': 1, 'morning': 1},
 'gym':     {'i': 1, 'went': 1, 'this': 1, 'morning': 1},
 'this':    {'i': 1, 'went': 1, 'gym': 1, 'morning': 1},
 'morning': {'i': 2, 'went': 1, 'gym': 1, 'this': 1, 'later': 1, 'rested': =
1},
 'later':   {'morning': 1, 'i': 1, 'rested': 1},
 'rested':  {'later': 1, 'morning': 1, 'i': 1},
 'was':     {'i': 1, 'tired': 1}, 'tired': {'i': 1, 'was': 1}
}</pre></b>
Debug this example.
The other tests use bigger data files, but not anything fundamentally diffe=
rent.
If you don't comment out lines 11-14, then a failure on line 10 will be
  unreadable/unusable when the console becomes garbage for line 14.
<p>
<li>Uncomment lines 11-12 and see if the code still produces the right answ=
er
  for thiss more complicated example.
If the dictionaries are different, it will show both as some very long line=
s
  and finish in a reasonable amount of time (but won't wreck the console).
The two different dictionaries will not be tremendoustly usefule for debugg=
ing.
You might have to use the "think" method of debugging:
  carefully review your code in light of the specifications, making correct=
ions
  as necessary.
<p>
<li>Uncomment lines 13-14 and see if the code still produces the right answ=
er
  for this very complicated example.
There is no way you can use the error message for debugging (and you will h=
ave
  to terminate the code and clear the console as explained above).
You will have to use the "think" method.
If you cannot get this function call to work, I'd suggest leaving these 2 l=
ines
  commented in <b>bsc5.txt</b> and go on to the other tests.
Come back to this function if you have time.
</ol>
<p>
Understand that this whole process of building a semantic dictionary from a
  large number of books still does not ensure that you will get the correct
  answers to the synonym problems.
Some are solved correctly, some aren't.
Maybe reading more books to build a bigger semantic dictionary would help.
Yet here we have stupid processing on a huge amount of data still not match=
ing
  people's ability to determine synonyms.
</td>
</tbody>
</table>

<!-- Extra Credit

<a name=3D"problem5">
<hr align=3D"left" width=3D"33%">
<table cellspacing=3D"0" cellpadding=3D"5" border=3D"0" rules=3D"none" widt=
h=3D"100%">
<tbody>
<tr valign=3D"top">
<td width =3D"20%"><b>Extra Credit</b></td>
<td width =3D"80%">
Write up all three answers in the file <b>extracredit.txt</b> and drop them=
 off
  on checkmate.
<ol>
<li>Specify a fa that is equivalent to the ndfa that finds inputs that end
      in <b>01</b>.
    It must identify some state that is stopped in only for input ending in=
 01
    (the <b>end</b> state in the ndfa).
<li>What is interesting about the results of the election using the
      <b>votepref3.txt</b> input file?
    How could we add another voter, such that his/her preferences allow X t=
o
      win on the first ballot?
<li>In the word generator program we used a <b>dict</b> value that was a
      <b>list</b> of words that was to contain no duplicates?
    Why can't we just use a <b>set</b> (what would break in our code)?
    If we wanted to use a set how could we modify the code to work correctl=
y
      (what is the smallest and/or fastest modification)?
</td>
</tbody>
</table>
-->

</a></body></html>
------MultipartBoundary--TsQpS4MWtx9PrYUY4C1dCNrkzGg63ymugQ1iRCtsqT----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-b8e7ac27-f0e6-46f7-9d2e-8cdb17fc19ca@mhtml.blink

@charset "utf-8";
=0A
------MultipartBoundary--TsQpS4MWtx9PrYUY4C1dCNrkzGg63ymugQ1iRCtsqT----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css2?family=Mulish:wght@200;300;400;500;600;700;800;900&display=swa

@charset "utf-8";

@font-face { font-family: Mulish; font-style: normal; font-weight: 200; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0gotcqA.woff2=
") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2=
DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 200; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk2wotcqA.woff2=
") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, =
U+2116; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 200; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0AotcqA.woff2=
") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-1=
69, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 200; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0QotcqA.woff2=
") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U=
+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 200; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk3wot.woff2") =
format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6,=
 U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,=
 U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 300; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0gotcqA.woff2=
") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2=
DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 300; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk2wotcqA.woff2=
") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, =
U+2116; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 300; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0AotcqA.woff2=
") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-1=
69, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 300; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0QotcqA.woff2=
") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U=
+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 300; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk3wot.woff2") =
format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6,=
 U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,=
 U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 400; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0gotcqA.woff2=
") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2=
DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 400; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk2wotcqA.woff2=
") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, =
U+2116; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 400; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0AotcqA.woff2=
") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-1=
69, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 400; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0QotcqA.woff2=
") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U=
+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 400; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk3wot.woff2") =
format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6,=
 U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,=
 U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 500; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0gotcqA.woff2=
") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2=
DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 500; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk2wotcqA.woff2=
") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, =
U+2116; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 500; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0AotcqA.woff2=
") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-1=
69, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 500; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0QotcqA.woff2=
") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U=
+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 500; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk3wot.woff2") =
format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6,=
 U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,=
 U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 600; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0gotcqA.woff2=
") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2=
DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 600; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk2wotcqA.woff2=
") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, =
U+2116; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 600; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0AotcqA.woff2=
") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-1=
69, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 600; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0QotcqA.woff2=
") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U=
+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 600; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk3wot.woff2") =
format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6,=
 U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,=
 U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 700; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0gotcqA.woff2=
") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2=
DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 700; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk2wotcqA.woff2=
") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, =
U+2116; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 700; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0AotcqA.woff2=
") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-1=
69, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 700; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0QotcqA.woff2=
") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U=
+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 700; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk3wot.woff2") =
format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6,=
 U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,=
 U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 800; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0gotcqA.woff2=
") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2=
DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 800; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk2wotcqA.woff2=
") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, =
U+2116; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 800; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0AotcqA.woff2=
") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-1=
69, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 800; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0QotcqA.woff2=
") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U=
+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 800; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk3wot.woff2") =
format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6,=
 U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,=
 U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 900; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0gotcqA.woff2=
") format("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2=
DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 900; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk2wotcqA.woff2=
") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, =
U+2116; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 900; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0AotcqA.woff2=
") format("woff2"); unicode-range: U+102-103, U+110-111, U+128-129, U+168-1=
69, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 900; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk0QotcqA.woff2=
") format("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U=
+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: Mulish; font-style: normal; font-weight: 900; src=
: url("https://fonts.gstatic.com/s/mulish/v12/1Ptvg83HX_SGhgqk3wot.woff2") =
format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6,=
 U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212,=
 U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--TsQpS4MWtx9PrYUY4C1dCNrkzGg63ymugQ1iRCtsqT----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/images/graph.gif

R0lGODlhUQLuAfcAAAAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8AAA/wgA/wgI/xAA/xAQ
/hAQ/xgA/xgY/yAA/yAg/yEh/igA/ygo/y4g/zAA/zAw/zIy/jUg/zYw/zgA/zg4/0AA/0BA/0ND
/kgA/0hI/1AA/1BQ/1RU/lc4/1gA/1hY/18g/2AA/2Bg/2RA/2Vl/mgA/2ho/2ow/3AA/3Bw/3Z2
/ngA/3h4/4AA/4CA/4SA/4cA/4eH/oeH/45A/48A/4+P/5cA/5eX/5hI/5iA/5iY/p0g/51w/54Q
/58A/5+f/6cA/6en/6mp/q8A/6+v/7JQ/7Kn/7cA/7e3/7q6/r8A/7+//8OH/8cA/8eA/8fH/8uv
/8vL/s8A/8/P/9M4/9XP/9cA/9co/9fX/9lo/9rP/9zc/t8A/9/f/+HP/+IY/+OP/+Uw/+cA/+fn
/+i3/+3X/+3t/u8A/++//+/f/+/v//Fo//Hv//cA//d4//f3//m///rX//uA//yX//33//8A//8I
//8Q//8Y//8g//8w//84//9Q//9g//9w//94//+P//+f//+3///P///f///n///v/////wAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAP/78KCgpICAgP8AAAD/AP//AAAA//8A/wD//////yH5BAAAAAAALAAAAABRAu4B
hwAAAIAAAACAAICAAAAAgIAAgACAgMDAwMDcwKbK8AAA/wgA/wgI/xAA/xAQ/hAQ/xgA/xgY/yAA
/yAg/yEh/igA/ygo/y4g/zAA/zAw/zIy/jUg/zYw/zgA/zg4/0AA/0BA/0ND/kgA/0hI/1AA/1BQ
/1RU/lc4/1gA/1hY/18g/2AA/2Bg/2RA/2Vl/mgA/2ho/2ow/3AA/3Bw/3Z2/ngA/3h4/4AA/4CA
/4SA/4cA/4eH/oeH/45A/48A/4+P/5cA/5eX/5hI/5iA/5iY/p0g/51w/54Q/58A/5+f/6cA/6en
/6mp/q8A/6+v/7JQ/7Kn/7cA/7e3/7q6/r8A/7+//8OH/8cA/8eA/8fH/8uv/8vL/s8A/8/P/9M4
/9XP/9cA/9co/9fX/9lo/9rP/9zc/t8A/9/f/+HP/+IY/+OP/+Uw/+cA/+fn/+i3/+3X/+3t/u8A
/++//+/f/+/v//Fo//Hv//cA//d4//f3//m///rX//uA//yX//33//8A//8I//8Q//8Y//8g//8w
//84//9Q//9g//9w//94//+P//+f//+3///P///f///n///v/////wAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/7
8KCgpICAgP8AAAD/AP//AAAA//8A/wD//////wj+ABUIHEiwoMGDCBMqXMiwocOHECNKnEixosWL
GDNq3Mixo8ePIEOKHEmypMmTKFOqXMmypcuXMGPKnEmzps2bOHPq3Mmzp8+fQIMKHUq0qNGjSJMq
Xcq0qdOnUKNKnUq1qtWrWLNq3cq1q9evYMOKHUu2rNmzaNOqXcu2rdu3cOPKnUu3rt27ePPq3cu3
r9+/gAMLHky4sOHDiBMrXsy4sePHkCNLnky5smWeGD6IuIHiQ4fLoEP3lfCCyp/TqFP/4XKjgujX
sNk2qMFF9WkwVGrbNuMDQuzfwL/KYIM6jhIUnw1WIAGE+Ok7NxoMzry5c/Lg2NGSMHM6DhASDzv+
+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
ckDPc0FPiEQriEUrdEN/ZD3HMA0PtUZ3dEpG9H+kNee5tTm/7Uuv9AgR8yAJ9U93KjZ/cE8ndfJu
5lFP9Zlg9Rh59VavNxlXa1OXdcOI9RTJ9Vv3OFsvZl/nde8uajS3clQPdgmPCvM+amM/9n6mdcp+
7WdvdvMwZi/Pqmif9kd5Zmle2zvP9tEmq2+e7CInI/1W9lLZ9W+vlZzypKhbXHjm6VIqcMn+pW11
9+yRoiaFzsAWN+BmOndPSXd7h4gPD8vYXQiNFvJ6F3jVVnE8U0SI7osVN+xHZ/aFr+YaB7IhEuq1
/PdLCXiLj5eb5i6lPl9zHuonL3ZpB/nDbnJrIuuwtqkoLwgn53IfX3lTbrbskms42Or2Jogtl2jh
vvksqZvAnmyHMPMCI/arBvahF9/QGLCFlgg4f2E5V3inx3mVz+Kmx/oBrfjw/vquV+6wr1GuF3tW
5OWPP3uBUHucIvu1H4y2V3W4VxG5p2q6r3uzp3itx3tc1/tO5/u+x+63V9K/F/zyMfySTvzD73XC
X3PHZ/y5DXxUXvzIPz2EEGdo/Iilf4j+zIfl3oZ8y+ednLrld978iddqgMNnj6980U8ZewNmqa/G
Xx4Li0P31nf9dS/gu0ZFizA8n8/63Efrs3YjmY9M1K/5mHfwvA994Z9RLrrxDiz5ENzb/a7DpSf3
vQps5OcMu+/6+Q3xjZd3S6J3n5bCeFcwTQKV+G5+5/f68TXeC+93Tipd349/fs/wTzN99p989ydg
+AeISAoGEixosCCRSAoFMlFYcOHBiBIHQpw4MSHEihQdWuzo8SPIkCILSvjzR8LIlCpXsmzp8iXM
mDJn0qxps2XJkxI1fnSAo4xCOEQmKIDDcaPAljw9+gQaSShRnkFvUrWZE2XVrFq3cu3+6vUr2K5X
d3JcaNZgiSkLp5R4eFTB0pQVzS5Nu7YtwYaRHAx0oHBG2MATxwoubPgw4sSKBRM+OJdu0glEjEYq
M4OvQalvVT6mO1AyZcuYC04wSmRgwtOLAzde7fo17NiyC7d2m3TiQiIgJqrdSzDuSOC2dVt04DQS
E7yzt9Ze7vw59OjSBzZH2nELC48sFCoXHtL7QOwftxCdrrW6+fTq17OviR68yC2VFTjAuDn4fZVq
y7enib4/gAEKKGB1nsE0WSSnlUFECaPJdZZLkCk0BWADpvSfhRlquOFrGHJo0HGQMfGhRx6SeCKK
KfpnElYqRlSChPCRaKKLNdp4o0T+NJKoVgYGgTAfjgroGCSRRX44JIdAZUfQBDPAwd+NSBo5JZXt
SamhT71NiIODUbJYJZhhZnilmBySWSaaaR52ppoEftkmnHG6xqac7NFZJ555snSnntLx2SeggUaU
EwofGHooookquiijjTr6KKSRSjoppZVaemmkKLwpKKedrpSTSaGKOiqppZp6Kqqpqroqq626+iqs
scLaoqe12moRqLLquiuvvfr6K7Cz3josscUaeyyyySq7LLPNOvsstNFKOy211Vp7LbbZarstt916
+y244Yo7Lrnlmnsuuumquy677br7LrzxyjsvvfXaey+++eq7L7/9+vsvwAELPDAPwQUbfDDCCSu8
MMMNexoQADs=

------MultipartBoundary--TsQpS4MWtx9PrYUY4C1dCNrkzGg63ymugQ1iRCtsqT----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/images/parity.jpg

/9j/4AAQSkZJRgABAAEAYABgAAD//gAfTEVBRCBUZWNobm9sb2dpZXMgSW5jLiBWMS4wMQD/2wCE
AAgFBgcGBQgHBgcJCAgJDBQNDAsLDBgREg4UHRkeHhwZHBsgJC4nICIrIhscKDYoKy8xMzQzHyY4
PDgyPC4yMzEBCAkJDAoMFw0NFzEhHCExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEx
MTExMTExMTExMTExMTExMf/EAaIAAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKCwEAAwEBAQEB
AQEBAQAAAAAAAAECAwQFBgcICQoLEAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEU
MoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2Rl
ZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK
0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+foRAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYS
QVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNU
VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5
usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/AABEIAUgBtgMBEQACEQEDEQH/
2gAMAwEAAhEDEQA/APHK/oA8sKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKA
CgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKALupaPqek+V/amnXdj5wJj+0QNHv
A643AZ6j8656OJo17+ympW3s07fcNprcpV0CCgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA
n0+zl1C/trK2AM1zKsUYJwCzEAfqayq1I0qcqktkm38hpXdjv5PDvh6LxqPA0lsqSEC2/tgyuJft
RXcG8vds2biE2Y3Y53Zr5xY3FvBf2ipab8llblvbe1721ve3lY15Y83IcDqNnLp2oXNlcgCa2laK
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
AFAH/9k=

------MultipartBoundary--TsQpS4MWtx9PrYUY4C1dCNrkzGg63ymugQ1iRCtsqT----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://www.ics.uci.edu/~pattis/ICS-33/assignments/program1/images/endin01.jpg

/9j/4AAQSkZJRgABAAEAYABgAAD//gAfTEVBRCBUZWNobm9sb2dpZXMgSW5jLiBWMS4wMQD/2wCE
AAgFBgcGBQgHBgcJCAgJDBQNDAsLDBgREg4UHRkeHhwZHBsgJC4nICIrIhscKDYoKy8xMzQzHyY4
PDgyPC4yMzEBCAkJDAoMFw0NFzEhHCExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTEx
MTExMTExMTExMTExMTExMf/EAaIAAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKCwEAAwEBAQEB
AQEBAQAAAAAAAAECAwQFBgcICQoLEAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEU
MoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2Rl
ZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK
0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+foRAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYS
QVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNU
VVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5
usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/AABEIAUsCzAMBEQACEQEDEQH/
2gAMAwEAAhEDEQA/APHK/oA8sKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKA
CgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAK
ACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA
KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAo
AKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgA
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
z1pKK8/61KUW9Ed3D4d8NeAAt14ynj1jWlG6PRrZg0cbdvOfp+H6MK+dljcZmvuYJclPrN7v/Cv1
/I15Y0/i37HIeL/FeqeLNQF1qkoCRjbBbxjbFAvoq/lz1OK9vAZfQwFPkpLfdvdvzM5ScnqYdegQ
FABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAU
AFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQAUAFABQA
UAFABQAUAFABQAUAFABQAUAFABQAUAFABQBNZXdzYXKXNlcS208ZykkTlWU+xFZ1KcKsXCaun0Y0
7bHc2/xSu723S08Y6Pp/iS3UYDzoI51HtIo4+uM+9fPzyCnSk54KpKk/LVfc/wDM19q9pK4pf4Wa
p8xi17QZT/BGyzxL+Jyx/SlbO6Gl4VF80/0Qfu35Cf8ACK/D+f8A49viE0PcibSpePbOQM0/7QzW
HxYS/pNf8EOSH8wv/COfDi25uPHF3dleGS3010J+hbIo+u5vP4cKo+s0/wAg5aa6irqnwz0bmx0L
VtdmXkNqFwIY8/ROo9iKTw+c4j+JVjTX91Xf4/owvTWyuU9a+J+vXtobDShbaDp3QW2mxiLj3Yc/
ljPpW+HyHC0p+1q3qT7yd/w2E6r2WhxZJYksSSeSTXu7GQlMAoAKACgAoAKACgAoAKACgAoAKACg
AoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAC
gAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKA
CgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAK
ACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA
KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAo
AKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgA
oAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACg
AoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAC
gAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKA
CgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAK
ACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoA
KACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAo
AKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgA
oAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKACgAoAKAP/2Q==

------MultipartBoundary--TsQpS4MWtx9PrYUY4C1dCNrkzGg63ymugQ1iRCtsqT------
